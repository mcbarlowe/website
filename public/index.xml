<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Barlowe Analytics</title>
    <link>https://barloweanalytics.com/</link>
    <description>Recent content on Barlowe Analytics</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>2019 Barlowe Analytics</copyright>
    <lastBuildDate>Sun, 27 Jun 2021 02:03:36 -0500</lastBuildDate><atom:link href="https://barloweanalytics.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The Gamma Distribution</title>
      <link>https://barloweanalytics.com/posts/math/stats/gamma_distribution/</link>
      <pubDate>Sun, 27 Jun 2021 02:03:36 -0500</pubDate>
      
      <guid>https://barloweanalytics.com/posts/math/stats/gamma_distribution/</guid>
      <description>The Gamma Distribution The Gamma Distribution is a very useful distribution used to model Poisson processes. The Poisson distribution determines the probability of a number of events in a given time span. The Gamma distribution gives the probability of a given wait time until the \(n\)th event is observed in that process.
Gamma Distribution Parameters The Gamma Distribution can be defined by two different sets of two parameters. It can have a shape parameter of \({k}\) and a scale parameter of \(\theta\) (theta) or a shape parameter of \(\alpha\) (alpha) and a rate parameter of \(\beta\) (beta).</description>
      <content>&lt;h1 id=&#34;the-gamma-distribution&#34;&gt;The Gamma Distribution&lt;/h1&gt;

&lt;p&gt;The Gamma Distribution is a very useful distribution used to model Poisson processes.
The Poisson distribution determines the probability of a number of
events in a given time span. The Gamma distribution gives the probability
of a given wait time until the &lt;span  class=&#34;math&#34;&gt;\(n\)&lt;/span&gt;th event is observed in that process.&lt;/p&gt;

&lt;h1 id=&#34;gamma-distribution-parameters&#34;&gt;Gamma Distribution Parameters&lt;/h1&gt;

&lt;p&gt;The Gamma Distribution can be defined by two different sets of two parameters.
It can have a shape parameter of &lt;span  class=&#34;math&#34;&gt;\({k}\)&lt;/span&gt; and a scale parameter of &lt;span  class=&#34;math&#34;&gt;\(\theta\)&lt;/span&gt; (theta) or a
shape parameter of &lt;span  class=&#34;math&#34;&gt;\(\alpha\)&lt;/span&gt; (alpha) and a rate parameter of &lt;span  class=&#34;math&#34;&gt;\(\beta\)&lt;/span&gt; (beta).
With either set of parameters &lt;span  class=&#34;math&#34;&gt;\(\alpha={k}\)&lt;/span&gt; and  &lt;span  class=&#34;math&#34;&gt;\(\beta={1/\theta}\)&lt;/span&gt;.
&lt;span  class=&#34;math&#34;&gt;\(\beta\)&lt;/span&gt; is also equal to the &lt;span  class=&#34;math&#34;&gt;\(\lambda\)&lt;/span&gt; of the Poisson process we are trying
to model with the Gamma Distribution.
Gamma distribution parameters can only be positive real numbers, meaning you can
never have a parameter for a gamma distribution be negative.&lt;/p&gt;

&lt;h1 id=&#34;moments-of-the-gamma-distribution&#34;&gt;Moments of the Gamma Distribution&lt;/h1&gt;

&lt;p&gt;The mean or expected value of a Gamma distribution is defined like so:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\mathop{{}\mathbb{E}}{[X]} = {k}\theta = \frac{\alpha}{\beta}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(\mathop{{}\mathbb{E}}{[X]}\)&lt;/span&gt; is the symbolic way of saying the &amp;quot;Expected Value of X&amp;quot;.
Meaning that on average if you randomly drew a number from this distribution with these
parameters the average value of the draws would equal this number.  If you have worked
with the Normal/Gaussian distribution you have seen this expressed as &lt;span  class=&#34;math&#34;&gt;\(\mu\)&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;The variance is defined thusly:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\mathop{{}\mathbb{V}}{[X]} = {k}\theta^{2} = \frac{\alpha}{\beta^{2}}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(\mathop{{}\mathbb{V}}{[X]}\)&lt;/span&gt; can also be displayed as &lt;span  class=&#34;math&#34;&gt;\(\textnormal{Var}({X})\)&lt;/span&gt; or &lt;span  class=&#34;math&#34;&gt;\(\sigma^{2}\)&lt;/span&gt; when
dealing with Normal/Gaussian distributions.&lt;/p&gt;

&lt;h1 id=&#34;purposes-of-the-gamma-distribution&#34;&gt;Purposes of the Gamma Distribution&lt;/h1&gt;

&lt;p&gt;The Gamma Distribution is used to predict the wait time until a future event happens. More specifically until
the &lt;span  class=&#34;math&#34;&gt;\({k}\)&lt;/span&gt;th event happens of a Poisson random variable. So if we wanted to model the time it takes
until the fifth time some event happens in a Poisson process the Gamma Distribution would be
our go-to distribution.  The Gamma Function models the wait time between Poisson distributed events.
Or another way to put it is the Gamma models the time spent in each state between events.&lt;/p&gt;

&lt;p&gt;As Aerin Kim notes in her excellent piece on the Gamma Distribution (link below in the sources):&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Poisson, Exponential, and Gamma distribution model different aspects of the same process.
Poisson distribution is used to model the # of events in the future, Exponential distribution
is used to predict the wait time &lt;strong&gt;until the very first event&lt;/strong&gt;, and Gamma distribution is
used to predict the wait time &lt;strong&gt;until the &lt;span  class=&#34;math&#34;&gt;\({k}\)&lt;/span&gt;th event&lt;/strong&gt;. (Kim)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So basically let&#39;s say that a catastrophic flood happens in your area once in a hundred years.
This would be our rate of occurrences, or &lt;span  class=&#34;math&#34;&gt;\(\lambda\)&lt;/span&gt;, of the Poisson process. So if we wanted
to know how long we would have to wait to see five catastrophic floods we would use a Gamma
distribution with the parameters of &lt;span  class=&#34;math&#34;&gt;\(\alpha = 5\)&lt;/span&gt; and &lt;span  class=&#34;math&#34;&gt;\(\theta = 1/\lambda\)&lt;/span&gt;.&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(\theta\)&lt;/span&gt; is our average wait time between events in our unit of time or rate parameter, which in this case is
100 years. Since one divided by one is one that means our average wait time between floods
that occur once every 100 years is one unit of our time interval which in this case is 100 years.
If our rate of floods was 5 every 100 years then &lt;span  class=&#34;math&#34;&gt;\(\theta\)&lt;/span&gt; would be .20 or 20 years on average
between floods.&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\(\alpha\)&lt;/span&gt; is our number of times we want the event to occur in this case 5
because we want to calculate the probability of wait times before the area experiences 5
catastrophic floods. Using the formulas above the expected value of our wait time
would be 500 years (&lt;span  class=&#34;math&#34;&gt;\(\alpha * \theta\)&lt;/span&gt;) with a variance of 500 years squared as well &lt;span  class=&#34;math&#34;&gt;\(5\cdot1^{2}\)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;But what if we want to calculate the probability of the wait time for 5 catastrophic floods being
100 years or less? To calculate this we would just plug our parameters into the Gamma CDF
(In this case the exact function is the Erlang CDF because the math is easier, but the Erlang is just
a special case of the Gamma where &lt;span  class=&#34;math&#34;&gt;\(\alpha\)&lt;/span&gt; is a positive integer) function. Here both &lt;span  class=&#34;math&#34;&gt;\(\lambda\)&lt;/span&gt;
and &lt;span  class=&#34;math&#34;&gt;\({t}\)&lt;/span&gt; are equal to one since our rate (&lt;span  class=&#34;math&#34;&gt;\(\lambda\)&lt;/span&gt;) is one and our interval of wait time (&lt;span  class=&#34;math&#34;&gt;\({t}\)&lt;/span&gt;) is one.
Don&#39;t confuse this with the &lt;span  class=&#34;math&#34;&gt;\(\lambda\)&lt;/span&gt; of the Poisson process that is actually
&lt;span  class=&#34;math&#34;&gt;\(\lambda={rate}\cdot{t}\)&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[\begin{aligned} {P(T\le1)}&amp;={CDF(1)} \\ &amp;={1 - P(\text{events}\lt5 \text{ in interval t})} \\ &amp;=1 - \sum_{n=0}^{\alpha-1}\frac{(\lambda{t})^{n}\exp^{-\lambda{t}}}{{n}!} \\ &amp;=1 - \sum_{n=0}^{4}\frac{(1)^{n}\exp^{-1}}{{n}!} \end{aligned}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Doing the math on that will give us the value of .003 or .3% probability of seeing 5 catastrophic floods
in the interval of 100 years. If we wanted the probability of 5 floods in say 300 years or less our formula would look like this:&lt;/p&gt;

&lt;p&gt;&lt;span  class=&#34;math&#34;&gt;\[1 - \sum_{n=0}^{4}\frac{(3)^{n}\exp^{-1}}{{n}!}\]&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;Which gives us a probability of roughly .18. But enough of doing this by hand lets see how to do it in
python. I&#39;m going to use the &lt;code&gt;scipy&lt;/code&gt; package which contains all sorts of probability distributions including
the gamma. The CDF function takes parameters of the wait time or interval, &lt;span  class=&#34;math&#34;&gt;\(\alpha\)&lt;/span&gt;, and scale which is equal to
our &lt;span  class=&#34;math&#34;&gt;\(\theta\)&lt;/span&gt; parameter.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;from scipy.stats import gamma

#probability we see 5 floods in one interval of time or less
#with scale parameter equal to 1
gamma.cdf(1, 5, scale=1)
0.003659846827343713

#probability we see 5 floods in three intervals of time or less
#with scale parameter equal to 1
gamma.cdf(3, 5, scale=1)
0.18473675547622787

#probability we see 1 flood in three intervals of time or less
#with scale parameter equal to 1
gamma.cdf(3, 1, scale=1)
0.950212931632136&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you want to dive deeper into using the gamma function to model wait times for Poisson processes
please read the links below as they go into much great detail on the gamma function and its uses.&lt;/p&gt;

&lt;h1 id=&#34;sources&#34;&gt;Sources&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;https://towardsdatascience.com/gamma-distribution-intuition-derivation-and-examples-55f407423840&#34;&gt;Gamma Distribution -- Intuition, Derivation, and Examples&lt;/a&gt; by Aerin Kim&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.mygreatlearning.com/blog/gamma-distribution/&#34;&gt;Gamma Distribution Explained | What is Gamma Distribution&lt;/a&gt; by Somak Sengupta&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://wiki.stat.ucla.edu/socr/index.php/AP_Statistics_Curriculum_2007_Gamma&#34;&gt;UCLA AP Statistics Curriculum 2007 Gamma&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://sherrytowers.com/2016/01/23/poisson-and-exponential-distributions/&#34;&gt;Poisson, Exponential, and Gamma distributions&lt;/a&gt; by Sherry Towers&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://towardsdatascience.com/seven-must-know-statistical-distributions-and-their-simulations-for-data-science-681c5ac41e32&#34;&gt;Seven Must-Know Statistical Distributions and Their Simulations for Data Science&lt;/a&gt; by Zijing Zhu&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://medium.com/geekculture/how-to-model-time-between-events-using-the-exponential-gamma-and-poisson-distributions-4b058a357a55&#34;&gt;How to Model Time Between Events Using the Exponential, Gamma, and Poisson Distributions&lt;/a&gt; by Federico Riveroll&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://online.stat.psu.edu/stat414/lesson/introduction-stat-414&#34;&gt;Introduction to STAT 414&lt;/a&gt; Penn State Department of Statistics&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>IDEs of March</title>
      <link>https://barloweanalytics.com/posts/ides-of-march/</link>
      <pubDate>Fri, 13 Mar 2020 01:39:30 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/posts/ides-of-march/</guid>
      <description>IDEs of March There are many articles about learning to code and mention where to learn or how to learn etc. Very few however mention where you are going to write the code once you learn it! Most beginner stuff have you working at that programming language&amp;rsquo;s terminal, which is great for getting the basics but you&amp;rsquo;ll quickly grow past that. So where does one actually write their source code? A lot of people use what&amp;rsquo;s called an IDE which stands for Integrated Development Envrionment.</description>
      <content>&lt;h1 id=&#34;ides-of-march&#34;&gt;IDEs of March&lt;/h1&gt;
&lt;p&gt;There are many articles about learning to code and mention where to learn
or how to learn etc. Very few however mention where you are going to write
the code once you learn it! Most beginner stuff have you working at that programming
language&amp;rsquo;s terminal, which is great for getting the basics but you&amp;rsquo;ll quickly grow past
that. So where does one actually write their source code? A lot of people use what&amp;rsquo;s
called an IDE which stands for Integrated Development Envrionment.&lt;/p&gt;
&lt;h1 id=&#34;whats-the-story-morning-glory&#34;&gt;What&amp;rsquo;s the Story Morning Glory&lt;/h1&gt;
&lt;p&gt;Codeacademy gives a &lt;a href=&#34;https://www.codecademy.com/articles/what-is-an-ide&#34;&gt;breif rundown&lt;/a&gt; and they
generally have these features: text editor, syntax highlighting, autocomplete, compiler(if needed),
and a debugger.&lt;/p&gt;
&lt;p&gt;A text editor is the most important part. If you are completely new to coding, you are probably used
to writing things in some sort of program like Word or Apple Docs. These programs are completely useless
it comes to storing code because they have tons of metadata in the text that you don&amp;rsquo;t see that
determines things like font size or type or margins etc. When you try to run this through a compiler
or an interpreter the program won&amp;rsquo;t know what to do with them and will create an error that prevents
the script from running. A text editor in its most basic form is the basic notepad program for both Mac and Windows. IDE&amp;rsquo;s just
take these editors and add a bunch of bells and whistles to them.&lt;/p&gt;
&lt;p&gt;Syntax highlighting is a benefit where certain key words are highlighted so you can quickly parse the code.
These are usually syntax to create functions or classes. Comments often have a different color than executable
code. There are a lot of different color schemes for syntax highlighting. My favorite is &lt;a href=&#34;https://github.com/pR0Ps/molokai-dark&#34;&gt;Molokai Dark&lt;/a&gt;
and while it is a vim color scheme I&amp;rsquo;m pretty sure its been ported to the IDEs will talk about.&lt;/p&gt;
&lt;p&gt;Autocomplete is more of argued about benefit of IDEs. Some people love it and some hate it. If you&amp;rsquo;re just starting
out I would lean more towards using it because its good at helping you remember function/variable names in packages.
Some people hate it because it can get in the way when you are trying to code and autocomplete the wrong things if
they have similar names.&lt;/p&gt;
&lt;p&gt;Unless you&amp;rsquo;re writing a compiled langauge(C++, Java) then the built in compiler is not a huge issue. But even for
things like Python/R there will be built in terminals where you can run your code with leaving the IDE environment
which will be key to not breaking your concentration. Lastly there are debuggers, I personally don&amp;rsquo;t use them because
I&amp;rsquo;m dumb but some people swear by them so being able to set break points for your code and stuff is really useful.&lt;/p&gt;
&lt;p&gt;Now don&amp;rsquo;t expect to download these and immediately get started coding as they do take some setup. For the most
part though its minimal to be able to start writing code to learn.&lt;/p&gt;
&lt;h1 id=&#34;so-what-are-my-choices&#34;&gt;So What are My Choices&lt;/h1&gt;
&lt;p&gt;There are quite a few choices out there some free, some not. This won&amp;rsquo;t be an exhaustive list but there will be
enough choice to cover most of the people&lt;/p&gt;
&lt;h2 id=&#34;visual-studio-code&#34;&gt;Visual Studio Code&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; is what I recommend for just about everyone. It&amp;rsquo;s free and open
source. Its backed by Microsoft so it won&amp;rsquo;t stopped being maintained for now reason. And it has tons of plugins you can
download that will allow you to work with any language. It has full Git integration and a built in terminal as well allowing
you to run code without leaving the environment. It works on Windows/Mac/Linux as well so you can use it on any platform.
Visual Studio Code also has tons of customization so you can configure it to do almost anything you want once you get to that
point. If you&amp;rsquo;re reading this to get &amp;ldquo;the best&amp;rdquo; IDE (no such things exists though!) then this would be my choice.&lt;/p&gt;
&lt;h2 id=&#34;rstudio&#34;&gt;Rstudio&lt;/h2&gt;
&lt;p&gt;The only time I disagree with what I said above is if you are going to be working in R then you need to use
&lt;a href=&#34;https://rstudio.com/products/rstudio/&#34;&gt;Rstudio&lt;/a&gt;. Its not quite as customizable as VS Code in terms of packages
being developed by others, but it is probably the best IDE when work with code in a pure data evironment. It also
integrates with Git and has built in terminals and command line so you don&amp;rsquo;t have to leave as well. Rstudio also
allows you to build &lt;a href=&#34;https://rmarkdown.rstudio.com/&#34;&gt;Rmarkdown files&lt;/a&gt; which is one of the easiest ways you can share
your findings as you can directly host them on &lt;a href=&#34;https://rpubs.com/&#34;&gt;Rpubs&lt;/a&gt; for free. If you work in R this is the easiest
way to build a portfolio to show to perspective employers&lt;/p&gt;
&lt;h2 id=&#34;atom&#34;&gt;Atom&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://atom.io/&#34;&gt;Atom&lt;/a&gt; is another IDE developed by GitHub. It seems to be more tuned to frontend developers esepcially
those working in Javascript, but I have set it up to use Python and I&amp;rsquo;m sure it can be configured for almost every language.
It is also customizable by downloading user made packages like VS code. Technically Atom isn&amp;rsquo;t a true IDE anymore but rather
a souped up text editor. But there are ways to add on those functionalities. Me personally I found Atom to be bloated and
clunky and it wouldn&amp;rsquo;t be my first choice. But some people like it so I thought I would include it here.&lt;/p&gt;
&lt;h2 id=&#34;others&#34;&gt;Others&lt;/h2&gt;
&lt;h3 id=&#34;python-spyder&#34;&gt;Python Spyder&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.spyder-ide.org/&#34;&gt;Spyder&lt;/a&gt; is python&amp;rsquo;s answer to Rstudio and like pandas to tidyverse it does enough but still feels
clunky. I haven&amp;rsquo;t used it in a while so take what I say with a grain of salt but it wasn&amp;rsquo;t my favorite. However if you want something
close to Rstudio, but don&amp;rsquo;t want to work in R (completely understandable), this is the best best.&lt;/p&gt;
&lt;h3 id=&#34;jetbrains&#34;&gt;Jetbrains&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://www.jetbrains.com/&#34;&gt;Jetbrains&lt;/a&gt; makes a lot of good IDEs that are tailored to their individual langauge such as Pycharm for
python, IntelliJ for Java, and Datagrips for SQL. These are not free but I have used them and there are some key benefits to paying.
One is you don&amp;rsquo;t have to rely on user created packages to add functionality and two you get actual support instead of having to scour
the internet to fix things. Again I feel VScode is just as good as these with a little extra work but if you don&amp;rsquo;t want to put the time
in and have the money consider paying for a license for these.&lt;/p&gt;
&lt;h1 id=&#34;only-read-past-here-if-you-are-truly-a-masochist&#34;&gt;Only Read Past Here if You Are Truly a Masochist&lt;/h1&gt;
&lt;p&gt;So for the record I don&amp;rsquo;t use any of these options for anything I do. Not. Use. A. Single. One. I actually craft my own IDE by combining a
bunch of different packages built around using &lt;a href=&#34;https://neovim.io/&#34;&gt;Neovim&lt;/a&gt; as my text editor. Neovim is an upgraded version of Vim which
was an improvment on Vi released in 1991. This is a text editor that has no mouse and you navigate around your code using entirely your
keyboard. It is not for the faint of heart and has a steep learning curve but if you have time to learn it you will be well rewarded
because Vim is a ubiqutous text editor that comes with all linux/unix systems and you&amp;rsquo;ll never not be able to work.&lt;/p&gt;
&lt;p&gt;In addition to neovim I install several packages to help me work. The first is &lt;a href=&#34;https://github.com/preservim/nerdtree&#34;&gt;NerdTree&lt;/a&gt; for navigating
directories of files. The next is &lt;a href=&#34;https://github.com/vim-airline/vim-airline&#34;&gt;Airline&lt;/a&gt; to improve my status bar. After that is
&lt;a href=&#34;https://github.com/vim-syntastic/syntastic&#34;&gt;Syntastic&lt;/a&gt; to handle all the linting for the languages I&amp;rsquo;m writing in. And lastly
&lt;a href=&#34;https://github.com/ervandew/supertab&#34;&gt;Supertab&lt;/a&gt; to handle my autocompletion. I&amp;rsquo;ve also used &lt;a href=&#34;https://kite.com/&#34;&gt;Kite&lt;/a&gt; for python things
which I really like as well.&lt;/p&gt;
&lt;p&gt;All of this is dificult to setup and maintain so don&amp;rsquo;t choose this until you feel you are ready. Honestly you may find you never want this
as Vim keystrokes can be added to almost any IDE these days. However if you find you want true customization of your text editor and IDE then
this is the only way to go. It is not for the faint of heart though and learning it is hard. However, if you decide to embark down this
path of darkness feel free to reach out to me and I&amp;rsquo;ll try to help you as much as I can.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>So You Want to Learn to Code</title>
      <link>https://barloweanalytics.com/posts/learning_to_code/</link>
      <pubDate>Thu, 12 Mar 2020 22:52:24 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/posts/learning_to_code/</guid>
      <description>So You Want to Learn to Code I&amp;rsquo;ve been getting a lot of inquiries recently asking a lot of similar quesitions. Often these questions are broad and hard to answer in an email or a DM, so I&amp;rsquo;ve decided to use my free time no longer taken up by watching sports to write a series of blog posts to answer them as best I can.
One of the big ones I keep seeing over and over again is &amp;ldquo;What are the best resources to learn to code?</description>
      <content>&lt;h1 id=&#34;so-you-want-to-learn-to-code&#34;&gt;So You Want to Learn to Code&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;ve been getting a lot of inquiries recently asking a lot of similar quesitions.
Often these questions are broad and hard to answer in an email or a DM, so I&amp;rsquo;ve decided
to use my free time no longer taken up by watching sports to write a series of blog
posts to answer them as best I can.&lt;/p&gt;
&lt;p&gt;One of the big ones I keep seeing over and over again is &amp;ldquo;What are the best resources to
learn to code?&amp;rdquo; or &amp;ldquo;How can I get started coding?&amp;rdquo; Questions like these are very hard to answer
because everyone learns differently and what some find easy others may find dificult. This post
will focuse on resources &lt;strong&gt;I&amp;rsquo;ve&lt;/strong&gt; found helpful in teaching myself to code. Will they work for you?
Maybe, or maybe not but a lot of these are used/recommended by others so I&amp;rsquo;m hoping they
work for you.&lt;/p&gt;
&lt;h1 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h1&gt;
&lt;p&gt;So the first step is to pick a programming language to learn. Which language should you pick?
It really doesn&amp;rsquo;t matter, the key is to stick with it long enough to learn it well because once
you do the same ideas will carry over from language to language. Most people asking me are wanting
to learn a programming language in order to do some type of &amp;ldquo;analytics&amp;rdquo;. This post will generally
tackle things from that view point, but I&amp;rsquo;m going to include some frontend resources
(skills also very important in analytics though for different reasons) in case someone
is interested.&lt;/p&gt;
&lt;p&gt;Two of the most popular langauges in analytics is R and python. Which one should you choose?
Again it doesn&amp;rsquo;t matter, just pick one and learn it! This part is going to take some time.
You&amp;rsquo;ll be doing a lot of boring stuff just to learn the basics of the language before you can
start working on the cool stuf. But don&amp;rsquo;t get discouraged and &lt;strong&gt;stick with it!&lt;/strong&gt; The key to learning
things isn&amp;rsquo;t smarts, but rather time, so keep chipping away at it every day.&lt;/p&gt;
&lt;p&gt;Disclaimer here Python is my language of choice. It&amp;rsquo;s what I use for everything I do so I&amp;rsquo;m a bit biased
in favor of it. However, that doesn&amp;rsquo;t it make it perfect by any means so if you decide its not for you don&amp;rsquo;t
feel bad. In fact I started learning R, didn&amp;rsquo;t like it, and then switched to Python. So if you&amp;rsquo;re just starting
and you don&amp;rsquo;t like it then don&amp;rsquo;t fall for a sunk cost fallacy. Switch things up and see if other languages
are easier to grasp&lt;/p&gt;
&lt;p&gt;One link I&amp;rsquo;ll start out with is &lt;a href=&#34;https://www.codecademy.com/&#34;&gt;Code Academy&lt;/a&gt;. It has a bunch of intro
lessons for all sorts of languages. And its a site that if I need to learn a new language and they have
a lesson on it I always go through that lesson. There is premium content but most of it is free and
its enough to get you started with any language you want to learn.&lt;/p&gt;
&lt;h1 id=&#34;beginner-python-resources&#34;&gt;Beginner Python Resources&lt;/h1&gt;
&lt;p&gt;One of my favorite beginner python books is &lt;a href=&#34;https://automatetheboringstuff.com/&#34;&gt;Automate the Boring Stuff&lt;/a&gt;
by Al Sweigart. Not only is it good for beginners, the problems it uses to teach you programming are problems
you&amp;rsquo;ll need to solve as a programmer. Things like file manipulation, web scraping, and working with
spreadsheets in python are all skills you will need in analytics and this book does a great job of
breaking things down. If you make it through the entire book you&amp;rsquo;ll come out the other side with
enough skills in python to do whatever you want next.&lt;/p&gt;
&lt;p&gt;The next I recommend if you don&amp;rsquo;t like reading is a class on EdX taught by MIT called
&lt;a href=&#34;https://www.edx.org/course/introduction-to-computer-science-and-programming-7&#34;&gt;Intro to Computer Science and Programming using Python&lt;/a&gt;.
It is a more broad course that focuses on important Computer Science ideas like loops,
recursion, functions, and objects. These are all very important ideas to learn and know when
learning programming as the translate to almost EVERY programming language and are a shared
vocabulary. Even if I program in Java and you program in Python, I can say I did this by
writing a for loop you&amp;rsquo;ll know what I mean and could replicate it in your own language as well.&lt;/p&gt;
&lt;h1 id=&#34;beginner-r-resources&#34;&gt;Beginner R Resources&lt;/h1&gt;
&lt;p&gt;I&amp;rsquo;m not as familiar with R but I have learned it and can work in it, but others may have better
resources than me. If you know something better for beginners then let me know &lt;a href=&#34;mailto:matt@barloweanaltyics.com&#34;&gt;matt@barloweanaltyics.com&lt;/a&gt;
and I&amp;rsquo;ll add it to the post.&lt;/p&gt;
&lt;p&gt;The course I used to mainly use R was this one from Udacity I took while working on my Data Analyst
Nanodegree from them. &lt;a href=&#34;https://www.udacity.com/course/data-analysis-with-r--ud651&#34;&gt;Data Analysis with R&lt;/a&gt; is
a free course you can go through all the lessons. I highly recommend it, and anything else from Udacity as well
researched that will give you a good coverage of the basics to build on.&lt;/p&gt;
&lt;p&gt;The next package I used is the &lt;a href=&#34;https://swirlstats.com/&#34;&gt;Swirl Package&lt;/a&gt;. This is an interactive package that
will allow you to learn R while running R. So its similar to the Code Academy courses I posted above just
not on a website.&lt;/p&gt;
&lt;p&gt;Lastly I found this site while researching this post. Disclaimer I haven&amp;rsquo;t worked through it but it seems free
and the first three lessons I skimmed through are very informative. If you go through it and had a bad experience
let me know and I&amp;rsquo;ll change my review on it. This site &lt;a href=&#34;https://www.guru99.com/r-tutorial.html&#34;&gt;R Tutorial for Beginners&lt;/a&gt;
even goes over the install process for R as well which could be very handy as well.&lt;/p&gt;
&lt;h1 id=&#34;other-resources&#34;&gt;Other Resources&lt;/h1&gt;
&lt;p&gt;One other site I worked on when I was first starting out was &lt;a href=&#34;https://www.freecodecamp.org/&#34;&gt;Free Code Camp&lt;/a&gt;.
Its focus is mainly frontend design using javascript, but that still contains a lot of good knowledge that
has come in handy a lot of times for me. They also have a good &lt;a href=&#34;https://www.freecodecamp.org/news/&#34;&gt;blog&lt;/a&gt;
that posts articles about learning to code, tutorials, and about coding in general. All of it is well done
and they have a great community focused on learning and beginnings. Even if you don&amp;rsquo;t want to do Javascript
some of their stuff on coding philosophies is worth the time to read.&lt;/p&gt;
&lt;p&gt;As an example here&amp;rsquo;s an &lt;a href=&#34;https://www.freecodecamp.org/news/a-gentler-introduction-to-programming-1f57383a1b2c/&#34;&gt;article&lt;/a&gt;
that goes in depth on the broad concepts of what programming is that you
might find interesting if you are first starting out.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Probability and Statistics: Chapter 1</title>
      <link>https://barloweanalytics.com/posts/degrootchapter1/</link>
      <pubDate>Sun, 10 Nov 2019 15:34:22 -0500</pubDate>
      
      <guid>https://barloweanalytics.com/posts/degrootchapter1/</guid>
      <description>Ok this is going to be a series of blog posts about detaling my notes and thoughts as I work through DeGroot and Schervish&amp;rsquo;s Probability and Statistics 4th Edition. This may be useful to you it may not be but I generally find I learn things better if I write down what I&amp;rsquo;m thinking about them so without further ado, let&amp;rsquo;s begin!
The History of Probability So apparently people have been gambling forever.</description>
      <content>&lt;p&gt;Ok this is going to be a series of blog posts about detaling my notes and thoughts as
I work through DeGroot and &lt;em&gt;Schervish&amp;rsquo;s Probability and Statistics 4th Edition.&lt;/em&gt; This may be
useful to you it may not be but I generally find I learn things better if I write down
what I&amp;rsquo;m thinking about them so without further ado, let&amp;rsquo;s begin!&lt;/p&gt;
&lt;h1 id=&#34;the-history-of-probability&#34;&gt;The History of Probability&lt;/h1&gt;
&lt;p&gt;So apparently people have been gambling forever. Balise Pascal and Pierre Fermat started the
mathematical theory of probability.&lt;/p&gt;
&lt;h1 id=&#34;interpretations-of-probability&#34;&gt;Interpretations of Probability&lt;/h1&gt;
&lt;p&gt;Apparently nobody can agree on a single scientific interpretation of what the term &lt;em&gt;probability&lt;/em&gt; means. I wonder what the probability of that happening is? But there seems to
be three main different interpretations of probablity.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Frequency Interpretaion of Probability&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;So the probability of a specific outcome of a process will be obtained is interpreted as
the relative frequency that outcome is obtained if the process were repeated a large number
of times under similar conditions. However there are some problems with this definition.
The main thing being that the ideas are rather vague. &amp;ldquo;Large number&amp;rdquo; has no defnitive
measurement of what the number should be to be considered large enough.&lt;/p&gt;
&lt;p&gt;Secondly, its stating that the experiment should be repeated under similar conditions but
again the conditions are not precisely described. The situations can&amp;rsquo;t be exactly identical
or else the results would always be the same. So the trials have to have some random features in them.&lt;/p&gt;
&lt;p&gt;Thirdly a shortcoming of the frequency interpretation of probability is that it applies only to
a problem where there are a large number of similar repetitions of a similar problem. Some
examples are that frequency interpretation can&amp;rsquo;t be used to determine the probability that a
friend will get married or that a research project will lead to the development of a new
treatment for a disease in a period of time.&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Classical Interpretation of Probability&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The classical interpretation of probability is based on the concept of equally likely outcomes
and the sums of the probabilities must equal 1. For example with a coin there are only two possible outcomes and if we assume that both outcomes are equally likely they have the same
probability and since the probabilities must equal one then their probabilities must be 1/2. To
generalize if the outcome of some process is one of &lt;em&gt;n&lt;/em&gt; different outcomes and if those outcomes
are equally likely to occur then the probability of each outcome is 1/&lt;em&gt;n&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;There are two main flaws when attempting to define a formal definition of probability from this
interpretation. One the concept of equally likely outcomes is based on the concept of probability
we are try to define. Two possible outcomes that are equally likely is the same as two outcomes have the same probability.&lt;/p&gt;
&lt;p&gt;Second no systematic method is given for assigning probabilities to outcomes were we don&amp;rsquo;t assume
them all to be equally likely. Look back at the problem of determing the probability of a friend
getting married. No reasonable person would assume all outcomes of that situation to be equally likely so a different method would be needed to determine the probabilities of each outcome.&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;Subjective Interpretation of Probability&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The subjective interpretation of probability is that the probability a person assigns to a
possible outcome of some process represents their own judgment of the likelihood that the
outcome will be obtained. If people&amp;rsquo;s judgements of the relative likelihoods of various combinations of outcomes satisfy certain conditions of consistency then it can be shown that
their subjective probabilities of the different possible events can be uniquely determined.&lt;/p&gt;
&lt;p&gt;The downfalls to this is that the idea that a person&amp;rsquo;s judgements be free from contradictions
or biases does not seem humanly possible unless the person is willing to adopt a collection of
judgements known to be consistent. Also these subjective interpretations provide no objective
basis for two or more  people working together to reach a common evaluation of the state of
knowledge.&lt;/p&gt;
&lt;p&gt;So the mathematical theory of probability can be done without regard to the controversies of
the different interpretations of the term probability.&lt;/p&gt;
&lt;h1 id=&#34;experiments-and-events&#34;&gt;Experiments and Events&lt;/h1&gt;
&lt;p&gt;An experiment is any process, real or hypothetical, in which the possible outcomes can be
identified ahead of time. An event is a well defined set of possible outcomes of the experiment.
The probability of each event is the way of saying how likely it is that the outcome of the
experiment is in the event.&lt;/p&gt;
&lt;p&gt;Once probabilities have been assigned to outcomes there is agreementthat the mathematical
theory of probability provides the appropriate methodology to further study probabilities.&lt;/p&gt;
&lt;h1 id=&#34;set-theory&#34;&gt;Set Theory&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;Sample Space:&lt;/strong&gt; The collection of all possible outcomes of an experiment is called the sample
space of the experiment. This space can also be thought of as a set or colleciton of the
different possible outcomes. Each outcome is a &lt;em&gt;point&lt;/em&gt; or &lt;em&gt;element&lt;/em&gt; in the sample space and
events are &lt;em&gt;subsets&lt;/em&gt; of the sample space.&lt;/p&gt;
&lt;p&gt;For example with rolling a six sided dice the sample space is the six numbers on the dice.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;S = {1, 2, 3, 4, 5, 6}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;One event we call &lt;em&gt;A&lt;/em&gt; is an even number is rolled on the dice represented thusly &lt;em&gt;A&lt;/em&gt; = {2, 4, 6}.
Another event is rolling a number greater than 2 then the subset of our sample space would
be &lt;em&gt;B&lt;/em&gt; = {3, 4, 5, 6}&lt;/p&gt;
&lt;p&gt;The collections of sets called events will have three conditions for the rest of the book.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Condition 1: The sample space &lt;em&gt;S&lt;/em&gt; must be an event where &lt;em&gt;S&lt;/em&gt; is the sample space of some
experiment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;Containment:&lt;/strong&gt; it is said that a set &lt;em&gt;A is contained in&lt;/em&gt; another set &lt;em&gt;B&lt;/em&gt; if every element of
the set &lt;em&gt;A&lt;/em&gt; also belongs to the set &lt;em&gt;B&lt;/em&gt;. This is expressed by A ⊂ B which says A is a subset
of B. Also can say that B contains A and also write B ⊃ A. For events this means that if A
occurs then so does B.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem 1.4.1:&lt;/strong&gt; Let A, B, and C be events. then A ⊂ S. If A ⊂ B and B ⊂ A, then A=B. If A⊂B and B ⊂ C, then A ⊂ C.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Theorem 1.4.3:&lt;/strong&gt; Let A be an event then ∅ ⊂ A.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Countable/Uncountable:&lt;/strong&gt; An infinite set A is countable if there is a one to one
correspondence between the elements of A and the set of natural numbers {1, 2, 3, &amp;hellip;}. A set is uncountable if it is neither finite nor countable. If it is said
that a set has at most countably many elements then the set is either finite or countable.&lt;/p&gt;
&lt;p&gt;Examples of countably infinite sets include the integers, even integers, odd integers,
the prime numbers, and any infinite sequence. these sets can be put in one to one
correspondence with the natural numbers. Every infinite sequence of distinct items
is a countable set as its indexing puts it in one to one correspondence with the natural numbers. Examples of uncountable sets are the real numbers, the positive
reals, numbers in the interval [0, 1], and the set of all ordered pairs of real
numbers.&lt;/p&gt;
&lt;h2 id=&#34;operation-of-set-theory&#34;&gt;Operation of Set Theory&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Complement:&lt;/strong&gt; The complement of a set A is defined to be the set that contains all
elements of the sample space S that do not belong to A. In terms of events the
compliment event of A is the event that A does not occur.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Condition 2:&lt;/strong&gt; If A is an event then the compliment of A is also an event.&lt;/p&gt;
&lt;p&gt;If A is an event the the compliment of the compliment of A is A. The compleiment of the empty set is S the sample space and the compilment of the sample space is the empty set.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Union of Two Sets:&lt;/strong&gt; If A and B are any two sets, the union of A and B is defined
to be the set containing all outcomes that belong to A alon, to B alone, or to both
A and B. The notation for the union of A and B is A ∪ B.&lt;/p&gt;
&lt;p&gt;For all sets A and B,
A ∪ B = B ∪ A,
A ∪ A = A,
A ∪ Ac = S,
A ∪ ∅ = A,
A ∪ S = S.
Furthermore, if A ⊂ B, then A ∪ B = B.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Union of Many Sets:&lt;/strong&gt; the union of n sets A₁, &amp;hellip;, An is defined to be the set that
contains all outcomes that bleong to at least one of these n sets.&lt;/p&gt;
&lt;p&gt;In terms of events the union of a colleciton of events is the event that at least
one of the events in the collections occurs.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Condition 3:&lt;/strong&gt; If A1, A2, . . . is a countable collection of events, then the union of all the events also an event.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Creating a New Postgres User</title>
      <link>https://barloweanalytics.com/sql/createuser/</link>
      <pubDate>Fri, 24 May 2019 21:33:42 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/sql/createuser/</guid>
      <description>Ok so if you&#39;ve come to this point you now have your database up and running and you want to allow others to access it. Some people say it&#39;s not the brightest idea, but hey, this data ain&#39;t going to share itself. Obviously letting them use your account is out of the question because as a superuser that will just allow them to wreak havoc any time they want on your meticulously gathered data.</description>
      <content>&lt;p&gt;Ok so if you&#39;ve come to this point you now have your database up and
running and you want to allow others to access it. Some people say
it&#39;s not the brightest idea, but hey, this data ain&#39;t going to share
itself. Obviously letting them use your account is out of the question
because as a superuser that will just allow them to wreak havoc any time
they want on your meticulously gathered data. That&#39;s were new users come
in to save the day&lt;/p&gt;
&lt;p&gt;Postgres users work pretty much the same way as Mac OSX users. You have
a username and a password, and each user is given rules and limitations
on what they can do. I&#39;ll get more into what privileges are available
for a Postgres user in the next tutorial, but for now just keep in mind
that they are the rules that let the database administrator know what
each individual user can do on the Postgres server&lt;/p&gt;
&lt;h2&gt;Difference Between a User and a Role&lt;/h2&gt;
&lt;p&gt;In older versions of Postgres a User and a Role used to be more
seperately defined. But from version 8.0 onward a User has been defined
as a subset of a Role, with the main difference being that when you create
a User Postgres assumes that it has login privileges to the Postgres
sever. If you create a role it does not have login privileges unless you
specifically define those privileges.&lt;/p&gt;
&lt;p&gt;Gennerally what I like to do is create users and then create roles that
I assign to each individual user to manage their privileges of what databases
they can connect to and what actions they can take on each database.&lt;/p&gt;
&lt;p&gt;Yes it is a bit confusing I understand, but I&#39;ll go over how I generally
do things that helps keep it seperate for me. So ok let&#39;s look at it in practice
and see if that makes things a little clearer.&lt;/p&gt;
&lt;h2&gt;Creating Your First User&lt;/h2&gt;
&lt;p&gt;Ok so you need to add one user to your Postgres server then this would be the
syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
CREATE USER matt WITH PASSWORD &#39;password&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok so with that you created one user with the user name &lt;code&gt;matt&lt;/code&gt;
and the password &lt;code&gt;password&lt;/code&gt;. Obviously, that&#39;s an awful password
and don&#39;t ever do that unless you want to have a bad time. The good news is
you created your first user, the bad news is they can&#39;t do anything yet other
than login to the Postgres server.&lt;/p&gt;
&lt;p&gt;If you ever lose track of the Users, or Roles, you&#39;ve created on your
Postgres server all you need to do is type &lt;code&gt;\du&lt;/code&gt; and Postgres
will show you a table of all the roles available on the server.&lt;/p&gt;
&lt;p&gt;But what good is a user if they can&#39;t do anything? No good if you ask me
that&#39;s why I&#39;ll show you how to grant them &lt;code&gt;SELECT&lt;/code&gt; privileges
to a table so they can at least access your data. Here is the syntax to do
that:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
GRANT SELECT ON ALL TABLES IN SCHEMA public TO matt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now the user &lt;code&gt;matt&lt;/code&gt; has the ability to &lt;code&gt;SELECT&lt;/code&gt;
query all the tables that have the schema public. If you are just starting
out with postgres most of your tables will use the public schema as that is
the default choice. This also raises another issue as well with your new
user. Since they have access to the public schema by default on Postgres
that means they have &lt;code&gt;USAGE&lt;/code&gt; or read permissions and &lt;code&gt;CREATE&lt;/code&gt;
which means they can create new tables on your database.&lt;/p&gt;
&lt;p&gt;Obviously as a superuser you could just delete what they create, but
it&#39;s better to just not allow it in the first place. This means you
need to revoke that privilege which is done with this syntax:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
REVOKE CREATE ON SCHEMA public FROM PUBLIC;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This removes the ablity for your new user to create a new table on the
database using the public schema. This is generally a good idea as a user
that creates a table becomes an onwer of that table; meaning they can insert
whatever data they want to the data and grant other users privileges to it
as well. You always want to make sure that your users can only do what you
want them to do. If you&#39;re fine with them creating new tables then ignore this,
but most likely you won&#39;t be.&lt;/p&gt;
&lt;h2&gt;Sources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#39;https://www.postgresql.org/docs/current/static/sql-createuser.html&#39;&gt;Postgres Create Users Docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://www.postgresql.org/docs/current/static/sql-createrole.html&#39;&gt;Postgres Create Role Docs&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://serverfault.com/questions/60508/grant-select-to-all-tables-in-postgresql&#39;&gt;Grant SELECT on all Tables&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://dba.stackexchange.com/questions/35316/why-is-a-new-user-allowed-to-create-a-table&#39;&gt;Why is new user allowed to create a table&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Postgres Remote Login</title>
      <link>https://barloweanalytics.com/sql/login/</link>
      <pubDate>Thu, 23 May 2019 22:25:11 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/sql/login/</guid>
      <description>Remote Postgres Login 
Ok if you&#39;ve been following along with the other tutorials you have seen me use the psql command to login into your database that you&#39;ve setup on your computer. But that&#39;s not all psql is use for, and in fact it has many diverse properties that you can use to pass SQL queries to the database without ever logging into the server itself. But I won&#39;t get into that with this tutorial, instead I&#39;m going to focus on using psql to login into a remote Postgres server</description>
      <content>&lt;h2&gt;Remote Postgres Login&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Ok if you&#39;ve been following along with the other tutorials you have seen me
use the &lt;code&gt;psql&lt;/code&gt; command to login into your database that you&#39;ve setup
on your computer. But that&#39;s not all &lt;code&gt;psql&lt;/code&gt; is use for, and in fact it
has many diverse properties that you can use to pass SQL queries to the database
without ever logging into the server itself. But I won&#39;t get into that with this
tutorial, instead I&#39;m going to focus on using psql to login into a remote Postgres
server&lt;/p&gt;
&lt;p&gt;A couple notes here first about OS differences. If you are on a Mac which I
assume most people will be if you&#39;re following these tutorials, the psql will work
anywhere at the command line. Windows though is a bit different. If you have your
&lt;code&gt;cmd&lt;/code&gt; window up and ready to log into your Postgres server, you will need
to change to the &lt;code&gt;bin&lt;/code&gt; directory located in the directory of your Postgres
to run the &lt;code&gt;psql&lt;/code&gt; command.&lt;/p&gt;
&lt;h2&gt;Login Syntax&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;psql --host=&amp;lt;hostname&amp;gt; --port=5432 --username=&amp;lt;username&amp;gt; --dbname=&amp;lt;dbname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok this is a sample command you would type in the command line if you were going
to login in to a remote Postgres server. Let&#39;s break it down piece by piece.
&lt;code&gt;--host=&amp;lt;hostname&amp;gt;&lt;/code&gt;: This is the address of the postgres server. It
could be an IP address, or a url, or it&#39;s hosted on amazon it will have something
that ends like this &lt;code&gt;rds.amazonaws.com&lt;/code&gt;. This what tells &lt;code&gt;psql&lt;/code&gt;
where to go and connect so you can login to the Postgres server.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--port=5432&lt;/code&gt;: This is the port that &lt;code&gt;psql&lt;/code&gt; will attempt to
connect. This is the default port for Postgres and will almost always be the same no
matter what Postgres server you are connecting to and you shouldn&#39;t have to change
this unless otherwise specified.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--username=&amp;lt;username&amp;gt;&lt;/code&gt;: This one is pretty self explanatory. You will
place your user name where &amp;lt;username&amp;gt; goes and it will be the username given
to you by your database administrator&lt;/p&gt;
&lt;p&gt;&lt;code&gt;--dbname=&amp;lt;dbname&amp;gt;&lt;/code&gt;: This will be the name of the database you
want to connect to and you will need to know this before you connect because you can&#39;t
connect to a Postgres server without specifying a database. This should also be
given to you by your database administrator as well.&lt;/p&gt;
&lt;p&gt;Ok that&#39;s basically it for using &lt;code&gt;psql&lt;/code&gt; to log into a Postgres server.
But what if you don&#39;t want to type all that in everytime you want to log into
a Postgres server? Well glad you asked because I&#39;ll briefly touch on how you can
do that.&lt;/p&gt;
&lt;h2&gt;Aliases&lt;/h2&gt;
&lt;p&gt;Ok I talked about aliases in some other SQL tutorials and this is similar but
not quite the same. The alias I&#39;m going to talk about right now is an alias for
a command for the Bash shell in Mac OS X. This alias is a shortcut that you create
so you don&#39;t have to type in long complicated commands. To create a shortcut
we will be editing the &lt;code&gt;.bash_profile&lt;/code&gt; file with a text editor.&lt;/p&gt;
&lt;p&gt;The &#39;.&#39; before a file in a Unix/Linux file structure means that it is a hidden
file and won&#39;t normally show up when you do a standard &lt;code&gt;ls&lt;/code&gt; command. The
&lt;code&gt;.bash_profile&lt;/code&gt; file controls how the Bash shell operates for you. I discussed
editing it briefly in the &lt;a href=&#39;gittutorial.html&#39;&gt;Git Tutorial&lt;/a&gt; so if you
forgot how to edit it you can refresh your memory there. But to create our alias
you&#39;ll need to open the file and put this line inside it:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
alias dblogin=&#39;psql --host=&amp;lt;host_name&amp;gt; --port=5432 --username=&amp;lt;username&amp;gt; --dbname=&amp;lt;dbname&amp;gt;&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So after you add that all on one line to your &lt;code&gt;.bash_profile&lt;/code&gt; file and
&lt;code&gt;source ~/.bash_profile&lt;/code&gt; to effect the changes to your shell all you would need
to do is type &lt;code&gt;dblogin&lt;/code&gt; and the Bash shell would automatically log you
into your Postgres server with the selected database. And that&#39;s all it takes to create
the alias. Aliases can be used for any series of Bash commands not just the psql so
if you run into another command that requires a lot of inputs, or even a chain of different
commands now you know how to set up an alias to make it easier to type into the
command line&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>SQL Basics</title>
      <link>https://barloweanalytics.com/posts/sqlbasics/</link>
      <pubDate>Wed, 22 May 2019 22:16:36 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/posts/sqlbasics/</guid>
      <description>Ok if you&amp;rsquo;ve read the first tutorial on installing Postgres and getting your first database up and running, you&amp;rsquo;re now wondering &amp;ldquo;So how do I access all this data?&amp;rdquo; Well that&amp;rsquo;s where this tutorial comes in as we are going to cover some of the basic commands in SQL to get the data we want. Ok let&amp;rsquo;s get started and dive right in to our data.
SELECT The SELECT command is going to be your workhorse command when working with SQL.</description>
      <content>&lt;p&gt;Ok if you&amp;rsquo;ve read the &lt;a href=&#34;https://barloweanalytics.com/sql/install/&#34;&gt;first tutorial&lt;/a&gt; on installing Postgres
and getting your first database up and running, you&amp;rsquo;re now wondering &amp;ldquo;So how do I access all
this data?&amp;rdquo; Well that&amp;rsquo;s where this tutorial comes in as we are going to cover some of the basic
commands in SQL to get the data we want. Ok let&amp;rsquo;s get started and dive right in to our data.&lt;/p&gt;
&lt;h2&gt;SELECT&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;SELECT&lt;/code&gt; command is going to be your workhorse command when working with
SQL. It&#39;s the command that tells Postgres to pull the data from the table and return it to you
so you can use it. The &lt;code&gt;SELECT&lt;/code&gt; is always paired with a &lt;code&gt;FROM&lt;/code&gt; clause
so you can tell Postgres exactly what table you want to select your data. Let&#39;s take a look
at the command I used at the end of the first tutorial:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
SELECT * FROM appearances LIMIT 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok let&#39;s break it down piece by piece. &lt;code&gt;SELECT&lt;/code&gt; tells Postgres that we want to
pull data. The &lt;code&gt;\*&lt;/code&gt; tells Postgres that we want the data from every column in the
table. You can choose whatever columns you want the data from and it doesn&#39;t have to be all of
them, but this example we are taking all of them. Next is the &lt;code&gt;FROM&lt;/code&gt; clause that tells
Postgres we want to pull all the columns from the &lt;code&gt;appearances&lt;/code&gt; table.&lt;/p&gt;
&lt;p&gt;If you have multiple tables you would change the name of the table to whatever table you wanted
data from. In order to get a list of all the tables you can select form type `\dt` and hit enter and
Postgres will list all the tables in the public schema. The &lt;code&gt;LIMIT&lt;/code&gt; clause while technically not needed
for a &lt;code&gt;SELECT&lt;/code&gt; query is very important here. If we had just entered in the command without
using the &lt;code&gt;LIMIT&lt;/code&gt; Postgres would have returned every single row in the table and you almost
never want to do that when just trying to look at the data in a table. So I added the &lt;code&gt;LIMIT&lt;/code&gt;
clause and passed it the number 1 telling Postgres to limit the results to 10 rows. Pretty simple eh?&lt;/p&gt;
&lt;p&gt;Ok lets do a couple other &lt;code&gt;SELECT&lt;/code&gt; queries to get the hang of it. First though
lets get a list of the columns in our table with the &lt;code&gt;\d+ appearances&lt;/code&gt; which will produce
and output similar to this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      Column   |       Type       | Collation | Nullable | Default | Storage  | Stats target | Description
    -----------+------------------+-----------+----------+---------+----------+--------------+-------------
     yearID    | bigint           |           |          |         | plain    |              |
     teamID    | text             |           |          |         | extended |              |
     lgID      | text             |           |          |         | extended |              |
     playerID  | text             |           |          |         | extended |              |
     G_all     | bigint           |           |          |         | plain    |              |
     GS        | double precision |           |          |         | plain    |              |
     G_batting | bigint           |           |          |         | plain    |              |
     G_defense | double precision |           |          |         | plain    |              |
     G_p       | bigint           |           |          |         | plain    |              |
     G_c       | bigint           |           |          |         | plain    |              |
     G_1b      | bigint           |           |          |         | plain    |              |
     G_2b      | bigint           |           |          |         | plain    |              |
     G_3b      | bigint           |           |          |         | plain    |              |
     G_ss      | bigint           |           |          |         | plain    |              |
     G_lf      | bigint           |           |          |         | plain    |              |
     G_cf      | bigint           |           |          |         | plain    |              |
     G_rf      | bigint           |           |          |         | plain    |              |
     G_of      | bigint           |           |          |         | plain    |              |
     G_dh      | double precision |           |          |         | plain    |              |
     G_ph      | double precision |           |          |         | plain    |              |
     G_pr      | double precision |           |          |         | plain    |              |
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This table in the database lists the number of appearances at each position for each player, each season
and each team. G_1b is games at first base and so on. If you need more info about the data
in the database the data dictionary can be found &lt;a href=&#34;http://www.seanlahman.com/files/database/readme2012.txt&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So now we have some columns lets adjust our &lt;code&gt;SELECT&lt;/code&gt; statement to just include a few
of them instead of all of them:&lt;/p&gt;
&lt;p&gt;Side note here. When I was creating this database file for you I forgot that Postgres only stores column names
in lower case. As you can see above it does recognize upper case when displaying the column. The problem comes
when you want to select a column. If you tried to execute &lt;code&gt;SELECT playerID from appearances limit 10;&lt;/code&gt; you would
get an error saying &lt;code&gt;HINT:  Perhaps you meant to reference the column &amp;quot;appearances.playerID&amp;quot;&lt;/code&gt;. But even if you added
appearances to your column selection you would still get the same error. THe solution is to add &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; around each
column name so that the column is searched for on a case sensitive basis. But that&amp;rsquo;s annoying so lets fix it.&lt;/p&gt;
&lt;p&gt;Logout of your current account with &lt;code&gt;\q&lt;/code&gt; and log back in with the superuser account that is the same
name as your computer user name and run this code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\t on
select &#39;ALTER TABLE &#39;||&#39;&amp;quot;&#39;||table_name||&#39;&amp;quot;&#39;||&#39; RENAME COLUMN &#39;||&#39;&amp;quot;&#39;||column_name||&#39;&amp;quot;&#39;||&#39; TO &#39; || lower(column_name)||&#39;;&#39;
from information_schema.columns
where table_schema = &#39;public&#39; and lower(column_name) != column_name
\g /tmp/go_to_lower
\i /tmp/go_to_lower
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy this and paste it into the terminal and hit enter and all your column names will be in lower case. I put this
in the tutorial for a very good reason. I could have gone back and fixed the file and changed a couple
things and made it look like I&amp;rsquo;m perfect, but I&amp;rsquo;m not. Mistakes happen. A lot. Things are going
break and a vital skill is to learn how to fix them. In this case I literally googled
&amp;lsquo;convert all columnames to lowercase postgres&amp;rsquo; and the answer was the &lt;a href=&#34;https://stackoverflow.com/questions/10086532/how-can-i-convert-all-columns-in-my-database-to-case-insensitive&#34;&gt;second link&lt;/a&gt;
on google.&lt;/p&gt;
&lt;p&gt;Do I know exactly what that code does? Nope but what better place to learn than in a situation
with no ramifications for it being wrong. Now knowing what to google comes with experience,
but a good place to start is to just cut and paste the error into google and start clicking.
This is what every professional programmer does and the ones that say they don&amp;rsquo;t are lying.
Ok back to the tutorial.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
SELECT playerid, teamid, g\_1b, g\_2b, g\_cf FROM appearances LIMIT 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will produce an output similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;playerid  | teamid | g_1b | g_2b | g_cf
-----------+--------+------+------+------
 abercda01 | TRO    |    0 |    0 |    0
 addybo01  | RC1    |    0 |   22 |    0
 allisar01 | CL1    |    0 |    2 |   29
 allisdo01 | WS3    |    0 |    0 |    0
 ansonca01 | RC1    |    1 |    2 |    0
 armstbo01 | FW1    |    0 |    0 |   11
 barkeal01 | RC1    |    0 |    0 |    0
 barnero01 | BS1    |    0 |   16 |    0
 barrebi01 | FW1    |    0 |    0 |    0
 barrofr01 | BS1    |    0 |    1 |    0
(10 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can play around with the columns as much as you want and see the different outputs.
So now we&#39;re getting some more info that is something we can work with but nothing we can actually
draw insights from. The next clause though will help us narrow our data even more.&lt;/p&gt;
&lt;h2&gt;WHERE&lt;/h2&gt;
&lt;p&gt;So above we learned how to limit the columns the SQL query returns so now lets learn how to
limit the rows that are returned. This is done in SQL by using the &lt;code&gt;WHERE&lt;/code&gt; clause
with your &lt;code&gt;SELECT&lt;/code&gt;. &lt;code&gt;WHERE&lt;/code&gt; gives your an SQL query a condition that it
checks every row against in the table and if the condition is met it returns the row and if it
isn&#39;t then the row is excluded. Let&#39;s look at it in action:
&lt;pre&gt;&lt;code&gt;SELECT playerid, teamid, g_1b, g_2b, g_cf from appearances WHERE yearid = 2016 limit 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now there is a order in which clauses go where in the SQL queries. Generally its SELECT, FROM,
WHERE, GROUP BY, HAVING, ORDER BY, LIMIT. So when playing around with your queries if you don&#39;t stick
to the order Postgres will throw an error. Obviously you don&#39;t know what all of those clauses do, but
just keep in mind for now that &lt;code&gt;WHERE&lt;/code&gt; clauses will go before `LIMIT` clauses. So if you ran
command above this should be your output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; yearid | playerid  | teamid | g_1b | g_2b | g_cf
--------+-----------+--------+------+------+------
   2016 | abadfe01  | BOS    |    0 |    0 |    0
   2016 | abadfe01  | MIN    |    0 |    0 |    0
   2016 | abreujo02 | CHA    |  152 |    0 |    0
   2016 | achteaj01 | LAA    |    0 |    0 |    0
   2016 | ackledu01 | NYA    |   13 |    1 |    0
   2016 | adamecr01 | COL    |    0 |   11 |    0
   2016 | adamsau01 | CLE    |    0 |    0 |    0
   2016 | adamsma01 | SLN    |   86 |    0 |    0
   2016 | adlemti01 | CIN    |    0 |    0 |    0
   2016 | adriaeh01 | SFN    |    0 |    7 |    0
(10 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has returned all the players that had an appearance in the 2016 baseball season.
You can also chain these commands as well using logical switches such as AND or OR like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT playerid, teamid, g_1b, g_2b, g_cf from appearances WHERE yearid = 2016 AND g_1b &amp;gt; 100;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will give us all the rows where the &lt;code&gt;yearid&lt;/code&gt; is 2016 and games played at first base is
over 100 games. There are many more ways to combine these as well to help select the data that you are looking
for but this is the basics. There will be a lot of trial and error at the beginning as you get
used to it so don&#39;t despair and just keep at it.
&lt;h2&gt;Aggregate Functions&lt;/h2&gt;
&lt;p&gt;Ok so we&#39;ve learned how to select the appropriate columns and rows that we want from our data, but
how do we look at the overall picture? How do we look at say the total goals scored or assists earned over
a season or even a certain time frame? This is done with our powerful aggregate functions and the
&lt;code&gt;GROUP BY&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As you can see with the data each row is an individual game for an individual player so just using
&lt;code&gt;WHERE&lt;/code&gt;won&#39;t tell you the whole story. So let&#39;s try and see if we can calculate
who had the most hits last season in the MLB.
&lt;pre&gt;&lt;code&gt;SELECT playerid, sum(h) FROM batting WHERE yearid=2017 GROUP BY playerid ORDER BY sum(h) DESC LIMIT 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which gives us this output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; playerid  | sum
-----------+-----
 blackch02 | 213
 altuvjo01 | 204
 inciaen01 | 201
 gordode01 | 201
 hosmeer01 | 192
 ozunama01 | 191
 andruel01 | 191
 abreujo02 | 189
 lemahdj01 | 189
 arenano01 | 187
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that column name isn&#39;t very helpful. However there is a simple way to change that using the &lt;code&gt;AS&lt;/code&gt;
command in your query:
&lt;pre&gt;&lt;code&gt;SELECT playerid, sum(h) AS Hits FROM batting WHERE yearid=2017 GROUP BY playerid ORDER BY sum(h) DESC LIMIT 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now your output looks much nicer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; playerid  | hits
-----------+------
 blackch02 |  213
 altuvjo01 |  204
 inciaen01 |  201
 gordode01 |  201
 hosmeer01 |  192
 ozunama01 |  191
 andruel01 |  191
 abreujo02 |  189
 lemahdj01 |  189
 arenano01 |  187
(10 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All &lt;code&gt;AS&lt;/code&gt; does is just create an alias for the column. You can do this with any column you want
along with tables as well. It just creates another name for something that you can refer to later on in the query.
In many newer flavors of SQL you can leave out the `AS` and just put a name next to the column, but I wanted to
show the `AS` incase something breaks if  you do that.
This won&#39;t work with &lt;code&gt;WHERE&lt;/code&gt; statements because the &lt;code&gt;WHERE&lt;/code&gt; clause references the raw data
and your alias is created after the fact.&lt;/p&gt;
&lt;p&gt;A couple other notes on this query. We have to do the &lt;code&gt;GROUP BY&lt;/code&gt; because this table has a row for each player for each team
they played for in the season. A lot of players do play for the same team all season but a lot don&amp;rsquo;t. If you didn&amp;rsquo;t do
the group by you would miss out on those other team hits for that player. The next is the &lt;code&gt;ORDER BY&lt;/code&gt; this tells
the database how to sort the results in this case by hits descending, i.e. from largest to smallest, with the
&lt;code&gt;DESC&lt;/code&gt; keyword. When you alias the &lt;code&gt;sum(h)&lt;/code&gt; column you can just using &lt;code&gt;ORDER BY hits&lt;/code&gt; next time. &lt;code&gt;ORDER BY&lt;/code&gt; will
sort ascending by default unless you tell it otherwise&lt;/p&gt;
&lt;p&gt;There several aggregate functions in SQL with the most common being &lt;code&gt;sum, avg, min, max, count&lt;/code&gt;. Respectively
those add the values, average the values, find the minimum value, the maximum value, and last counts the number of values i.e.
the of rows in a column.&lt;/p&gt;
&lt;p&gt;The next and most important part of an aggregate function is the &lt;code&gt;GROUP BY&lt;/code&gt; clause. This tells
Postgres how we want to calculate the aggregate functions. If we left out the &lt;code&gt;player&lt;/code&gt; column then
the functions would just sum the total goals and assists of every player after the date we gave it. &lt;code&gt;GROUP BY&lt;/code&gt;
though allows us to tell Postgres that we want to group the sums by each player.
&lt;code&gt;GROUP BY&lt;/code&gt; doesn&#39;t just work
for players we can use it on the &lt;code&gt;teamid&lt;/code&gt; column as well or any other categorical column in your database.
In this one that is just mainly our teams and players, but if you were working with another database with
different categorical columns &lt;code&gt;GROUP BY&lt;/code&gt; would work just as well on those with calculating aggregate
stats. If you have some experinece with pandas or R dataframes &lt;code&gt;GROUP BY&lt;/code&gt; in SQL works basically the same
as &lt;code&gt;.groupby&lt;/code&gt; and &lt;code&gt;group_by&lt;/code&gt; respectively in those langauges.&lt;/p&gt;
&lt;p&gt;Our next tutorial will cover &lt;code&gt;JOIN&lt;/code&gt; so you can finall tell which players are actually accumulating the stats
you are calculating in you queries.&lt;/p&gt;
&lt;h2&gt;Sources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#39;https://www.postgresql.org/docs/9.5/static/functions-aggregate.html&#39;&gt;Postgres Aggregate Functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://stackoverflow.com/questions/9532668/list-rows-after-specific-date&#39;&gt;List Rows after Specific Date in SQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://dba.stackexchange.com/questions/22362/how-do-i-list-all-columns-for-a-specified-table&#39;&gt;List All Columns of Table&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>SQL Basics</title>
      <link>https://barloweanalytics.com/sql/sqlbasics/</link>
      <pubDate>Wed, 22 May 2019 22:16:36 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/sql/sqlbasics/</guid>
      <description>Ok if you&amp;rsquo;ve read the first tutorial on installing Postgres and getting your first database up and running, you&amp;rsquo;re now wondering &amp;ldquo;So how do I access all this data?&amp;rdquo; Well that&amp;rsquo;s where this tutorial comes in as we are going to cover some of the basic commands in SQL to get the data we want. Ok let&amp;rsquo;s get started and dive right in to our data.
SELECT The SELECT command is going to be your workhorse command when working with SQL.</description>
      <content>&lt;p&gt;Ok if you&amp;rsquo;ve read the &lt;a href=&#34;https://barloweanalytics.com/sql/install/&#34;&gt;first tutorial&lt;/a&gt; on installing Postgres
and getting your first database up and running, you&amp;rsquo;re now wondering &amp;ldquo;So how do I access all
this data?&amp;rdquo; Well that&amp;rsquo;s where this tutorial comes in as we are going to cover some of the basic
commands in SQL to get the data we want. Ok let&amp;rsquo;s get started and dive right in to our data.&lt;/p&gt;
&lt;h2&gt;SELECT&lt;/h2&gt;
&lt;p&gt;The &lt;code&gt;SELECT&lt;/code&gt; command is going to be your workhorse command when working with
SQL. It&#39;s the command that tells Postgres to pull the data from the table and return it to you
so you can use it. The &lt;code&gt;SELECT&lt;/code&gt; is always paired with a &lt;code&gt;FROM&lt;/code&gt; clause
so you can tell Postgres exactly what table you want to select your data. Let&#39;s take a look
at the command I used at the end of the first tutorial:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
SELECT * FROM appearances LIMIT 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok let&#39;s break it down piece by piece. &lt;code&gt;SELECT&lt;/code&gt; tells Postgres that we want to
pull data. The &lt;code&gt;\*&lt;/code&gt; tells Postgres that we want the data from every column in the
table. You can choose whatever columns you want the data from and it doesn&#39;t have to be all of
them, but this example we are taking all of them. Next is the &lt;code&gt;FROM&lt;/code&gt; clause that tells
Postgres we want to pull all the columns from the &lt;code&gt;appearances&lt;/code&gt; table.&lt;/p&gt;
&lt;p&gt;If you have multiple tables you would change the name of the table to whatever table you wanted
data from. In order to get a list of all the tables you can select form type `\dt` and hit enter and
Postgres will list all the tables in the public schema. The &lt;code&gt;LIMIT&lt;/code&gt; clause while technically not needed
for a &lt;code&gt;SELECT&lt;/code&gt; query is very important here. If we had just entered in the command without
using the &lt;code&gt;LIMIT&lt;/code&gt; Postgres would have returned every single row in the table and you almost
never want to do that when just trying to look at the data in a table. So I added the &lt;code&gt;LIMIT&lt;/code&gt;
clause and passed it the number 1 telling Postgres to limit the results to 10 rows. Pretty simple eh?&lt;/p&gt;
&lt;p&gt;Ok lets do a couple other &lt;code&gt;SELECT&lt;/code&gt; queries to get the hang of it. First though
lets get a list of the columns in our table with the &lt;code&gt;\d+ appearances&lt;/code&gt; which will produce
and output similar to this:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;      Column   |       Type       | Collation | Nullable | Default | Storage  | Stats target | Description
    -----------+------------------+-----------+----------+---------+----------+--------------+-------------
     yearID    | bigint           |           |          |         | plain    |              |
     teamID    | text             |           |          |         | extended |              |
     lgID      | text             |           |          |         | extended |              |
     playerID  | text             |           |          |         | extended |              |
     G_all     | bigint           |           |          |         | plain    |              |
     GS        | double precision |           |          |         | plain    |              |
     G_batting | bigint           |           |          |         | plain    |              |
     G_defense | double precision |           |          |         | plain    |              |
     G_p       | bigint           |           |          |         | plain    |              |
     G_c       | bigint           |           |          |         | plain    |              |
     G_1b      | bigint           |           |          |         | plain    |              |
     G_2b      | bigint           |           |          |         | plain    |              |
     G_3b      | bigint           |           |          |         | plain    |              |
     G_ss      | bigint           |           |          |         | plain    |              |
     G_lf      | bigint           |           |          |         | plain    |              |
     G_cf      | bigint           |           |          |         | plain    |              |
     G_rf      | bigint           |           |          |         | plain    |              |
     G_of      | bigint           |           |          |         | plain    |              |
     G_dh      | double precision |           |          |         | plain    |              |
     G_ph      | double precision |           |          |         | plain    |              |
     G_pr      | double precision |           |          |         | plain    |              |
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This table in the database lists the number of appearances at each position for each player, each season
and each team. G_1b is games at first base and so on. If you need more info about the data
in the database the data dictionary can be found &lt;a href=&#34;http://www.seanlahman.com/files/database/readme2012.txt&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;So now we have some columns lets adjust our &lt;code&gt;SELECT&lt;/code&gt; statement to just include a few
of them instead of all of them:&lt;/p&gt;
&lt;p&gt;Side note here. When I was creating this database file for you I forgot that Postgres only stores column names
in lower case. As you can see above it does recognize upper case when displaying the column. The problem comes
when you want to select a column. If you tried to execute &lt;code&gt;SELECT playerID from appearances limit 10;&lt;/code&gt; you would
get an error saying &lt;code&gt;HINT:  Perhaps you meant to reference the column &amp;quot;appearances.playerID&amp;quot;&lt;/code&gt;. But even if you added
appearances to your column selection you would still get the same error. THe solution is to add &lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt; around each
column name so that the column is searched for on a case sensitive basis. But that&amp;rsquo;s annoying so lets fix it.&lt;/p&gt;
&lt;p&gt;Logout of your current account with &lt;code&gt;\q&lt;/code&gt; and log back in with the superuser account that is the same
name as your computer user name and run this code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;\t on
select &#39;ALTER TABLE &#39;||&#39;&amp;quot;&#39;||table_name||&#39;&amp;quot;&#39;||&#39; RENAME COLUMN &#39;||&#39;&amp;quot;&#39;||column_name||&#39;&amp;quot;&#39;||&#39; TO &#39; || lower(column_name)||&#39;;&#39;
from information_schema.columns
where table_schema = &#39;public&#39; and lower(column_name) != column_name
\g /tmp/go_to_lower
\i /tmp/go_to_lower
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Copy this and paste it into the terminal and hit enter and all your column names will be in lower case. I put this
in the tutorial for a very good reason. I could have gone back and fixed the file and changed a couple
things and made it look like I&amp;rsquo;m perfect, but I&amp;rsquo;m not. Mistakes happen. A lot. Things are going
break and a vital skill is to learn how to fix them. In this case I literally googled
&amp;lsquo;convert all columnames to lowercase postgres&amp;rsquo; and the answer was the &lt;a href=&#34;https://stackoverflow.com/questions/10086532/how-can-i-convert-all-columns-in-my-database-to-case-insensitive&#34;&gt;second link&lt;/a&gt;
on google.&lt;/p&gt;
&lt;p&gt;Do I know exactly what that code does? Nope but what better place to learn than in a situation
with no ramifications for it being wrong. Now knowing what to google comes with experience,
but a good place to start is to just cut and paste the error into google and start clicking.
This is what every professional programmer does and the ones that say they don&amp;rsquo;t are lying.
Ok back to the tutorial.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
SELECT playerid, teamid, g\_1b, g\_2b, g\_cf FROM appearances LIMIT 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will produce an output similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;playerid  | teamid | g_1b | g_2b | g_cf
-----------+--------+------+------+------
 abercda01 | TRO    |    0 |    0 |    0
 addybo01  | RC1    |    0 |   22 |    0
 allisar01 | CL1    |    0 |    2 |   29
 allisdo01 | WS3    |    0 |    0 |    0
 ansonca01 | RC1    |    1 |    2 |    0
 armstbo01 | FW1    |    0 |    0 |   11
 barkeal01 | RC1    |    0 |    0 |    0
 barnero01 | BS1    |    0 |   16 |    0
 barrebi01 | FW1    |    0 |    0 |    0
 barrofr01 | BS1    |    0 |    1 |    0
(10 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can play around with the columns as much as you want and see the different outputs.
So now we&#39;re getting some more info that is something we can work with but nothing we can actually
draw insights from. The next clause though will help us narrow our data even more.&lt;/p&gt;
&lt;h2&gt;WHERE&lt;/h2&gt;
&lt;p&gt;So above we learned how to limit the columns the SQL query returns so now lets learn how to
limit the rows that are returned. This is done in SQL by using the &lt;code&gt;WHERE&lt;/code&gt; clause
with your &lt;code&gt;SELECT&lt;/code&gt;. &lt;code&gt;WHERE&lt;/code&gt; gives your an SQL query a condition that it
checks every row against in the table and if the condition is met it returns the row and if it
isn&#39;t then the row is excluded. Let&#39;s look at it in action:
&lt;pre&gt;&lt;code&gt;SELECT playerid, teamid, g_1b, g_2b, g_cf from appearances WHERE yearid = 2016 limit 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now there is a order in which clauses go where in the SQL queries. Generally its SELECT, FROM,
WHERE, GROUP BY, HAVING, ORDER BY, LIMIT. So when playing around with your queries if you don&#39;t stick
to the order Postgres will throw an error. Obviously you don&#39;t know what all of those clauses do, but
just keep in mind for now that &lt;code&gt;WHERE&lt;/code&gt; clauses will go before `LIMIT` clauses. So if you ran
command above this should be your output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; yearid | playerid  | teamid | g_1b | g_2b | g_cf
--------+-----------+--------+------+------+------
   2016 | abadfe01  | BOS    |    0 |    0 |    0
   2016 | abadfe01  | MIN    |    0 |    0 |    0
   2016 | abreujo02 | CHA    |  152 |    0 |    0
   2016 | achteaj01 | LAA    |    0 |    0 |    0
   2016 | ackledu01 | NYA    |   13 |    1 |    0
   2016 | adamecr01 | COL    |    0 |   11 |    0
   2016 | adamsau01 | CLE    |    0 |    0 |    0
   2016 | adamsma01 | SLN    |   86 |    0 |    0
   2016 | adlemti01 | CIN    |    0 |    0 |    0
   2016 | adriaeh01 | SFN    |    0 |    7 |    0
(10 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This has returned all the players that had an appearance in the 2016 baseball season.
You can also chain these commands as well using logical switches such as AND or OR like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT playerid, teamid, g_1b, g_2b, g_cf from appearances WHERE yearid = 2016 AND g_1b &amp;gt; 100;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will give us all the rows where the &lt;code&gt;yearid&lt;/code&gt; is 2016 and games played at first base is
over 100 games. There are many more ways to combine these as well to help select the data that you are looking
for but this is the basics. There will be a lot of trial and error at the beginning as you get
used to it so don&#39;t despair and just keep at it.
&lt;h2&gt;Aggregate Functions&lt;/h2&gt;
&lt;p&gt;Ok so we&#39;ve learned how to select the appropriate columns and rows that we want from our data, but
how do we look at the overall picture? How do we look at say the total goals scored or assists earned over
a season or even a certain time frame? This is done with our powerful aggregate functions and the
&lt;code&gt;GROUP BY&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;As you can see with the data each row is an individual game for an individual player so just using
&lt;code&gt;WHERE&lt;/code&gt;won&#39;t tell you the whole story. So let&#39;s try and see if we can calculate
who had the most hits last season in the MLB.
&lt;pre&gt;&lt;code&gt;SELECT playerid, sum(h) FROM batting WHERE yearid=2017 GROUP BY playerid ORDER BY sum(h) DESC LIMIT 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which gives us this output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; playerid  | sum
-----------+-----
 blackch02 | 213
 altuvjo01 | 204
 inciaen01 | 201
 gordode01 | 201
 hosmeer01 | 192
 ozunama01 | 191
 andruel01 | 191
 abreujo02 | 189
 lemahdj01 | 189
 arenano01 | 187
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Well that column name isn&#39;t very helpful. However there is a simple way to change that using the &lt;code&gt;AS&lt;/code&gt;
command in your query:
&lt;pre&gt;&lt;code&gt;SELECT playerid, sum(h) AS Hits FROM batting WHERE yearid=2017 GROUP BY playerid ORDER BY sum(h) DESC LIMIT 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now your output looks much nicer:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; playerid  | hits
-----------+------
 blackch02 |  213
 altuvjo01 |  204
 inciaen01 |  201
 gordode01 |  201
 hosmeer01 |  192
 ozunama01 |  191
 andruel01 |  191
 abreujo02 |  189
 lemahdj01 |  189
 arenano01 |  187
(10 rows)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;All &lt;code&gt;AS&lt;/code&gt; does is just create an alias for the column. You can do this with any column you want
along with tables as well. It just creates another name for something that you can refer to later on in the query.
In many newer flavors of SQL you can leave out the `AS` and just put a name next to the column, but I wanted to
show the `AS` incase something breaks if  you do that.
This won&#39;t work with &lt;code&gt;WHERE&lt;/code&gt; statements because the &lt;code&gt;WHERE&lt;/code&gt; clause references the raw data
and your alias is created after the fact.&lt;/p&gt;
&lt;p&gt;A couple other notes on this query. We have to do the &lt;code&gt;GROUP BY&lt;/code&gt; because this table has a row for each player for each team
they played for in the season. A lot of players do play for the same team all season but a lot don&amp;rsquo;t. If you didn&amp;rsquo;t do
the group by you would miss out on those other team hits for that player. The next is the &lt;code&gt;ORDER BY&lt;/code&gt; this tells
the database how to sort the results in this case by hits descending, i.e. from largest to smallest, with the
&lt;code&gt;DESC&lt;/code&gt; keyword. When you alias the &lt;code&gt;sum(h)&lt;/code&gt; column you can just using &lt;code&gt;ORDER BY hits&lt;/code&gt; next time. &lt;code&gt;ORDER BY&lt;/code&gt; will
sort ascending by default unless you tell it otherwise&lt;/p&gt;
&lt;p&gt;There several aggregate functions in SQL with the most common being &lt;code&gt;sum, avg, min, max, count&lt;/code&gt;. Respectively
those add the values, average the values, find the minimum value, the maximum value, and last counts the number of values i.e.
the of rows in a column.&lt;/p&gt;
&lt;p&gt;The next and most important part of an aggregate function is the &lt;code&gt;GROUP BY&lt;/code&gt; clause. This tells
Postgres how we want to calculate the aggregate functions. If we left out the &lt;code&gt;player&lt;/code&gt; column then
the functions would just sum the total goals and assists of every player after the date we gave it. &lt;code&gt;GROUP BY&lt;/code&gt;
though allows us to tell Postgres that we want to group the sums by each player.
&lt;code&gt;GROUP BY&lt;/code&gt; doesn&#39;t just work
for players we can use it on the &lt;code&gt;teamid&lt;/code&gt; column as well or any other categorical column in your database.
In this one that is just mainly our teams and players, but if you were working with another database with
different categorical columns &lt;code&gt;GROUP BY&lt;/code&gt; would work just as well on those with calculating aggregate
stats. If you have some experinece with pandas or R dataframes &lt;code&gt;GROUP BY&lt;/code&gt; in SQL works basically the same
as &lt;code&gt;.groupby&lt;/code&gt; and &lt;code&gt;group_by&lt;/code&gt; respectively in those langauges.&lt;/p&gt;
&lt;p&gt;Our next tutorial will cover &lt;code&gt;JOIN&lt;/code&gt; so you can finall tell which players are actually accumulating the stats
you are calculating in you queries.&lt;/p&gt;
&lt;h2&gt;Sources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#39;https://www.postgresql.org/docs/9.5/static/functions-aggregate.html&#39;&gt;Postgres Aggregate Functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://stackoverflow.com/questions/9532668/list-rows-after-specific-date&#39;&gt;List Rows after Specific Date in SQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://dba.stackexchange.com/questions/22362/how-do-i-list-all-columns-for-a-specified-table&#39;&gt;List All Columns of Table&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Using Travis CI and Codecov with your Python Project</title>
      <link>https://barloweanalytics.com/posts/travis/</link>
      <pubDate>Mon, 20 May 2019 00:22:29 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/posts/travis/</guid>
      <description>by Matthew Barlowe I&amp;rsquo;m going to cover two important concepts when it comes to coding: Continuous Integration and Code Coverage. Continuous Integration is the act of merging everyones code into the main code repository several times a day instead of doing it once a day or every few days.
There are pros and cons to this behavior which is beyond the scope of the article, but I like Continuous Integration (CI) because it fits in with my own coding philosophy.</description>
      <content>&lt;h3 id=&#34;by-matthew-barlowe&#34;&gt;by Matthew Barlowe&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m going to cover two important concepts when it comes to
coding: Continuous Integration and Code Coverage. Continuous Integration
is the act of merging everyones code into the main code repository several
times a day instead of doing it once a day or every few days.&lt;/p&gt;
&lt;p&gt;There are pros and cons to this behavior which is beyond the scope of the
article, but I like Continuous Integration (CI) because it fits in with
my own coding philosophy. I like to commit often usually after every
feature/function I create. This is because if something breaks I
don&amp;rsquo;t want to have to go back through lines and lines of code to
figure out what is actually breaking things.
The second part of CI is each merge automatically runs tests to
make sure the new code doesn&amp;rsquo;t break the old code. Automating tests
is a great behavior because it means never forgetting to
run them.&lt;/p&gt;
&lt;p&gt;Tests brings us to the next part of this article: code coverage.
The idea of code coverage concerns the tests run after each
integration of the code. Code coverage examines all tests
and determines what percentage of the code base the tests
actually test.&lt;/p&gt;
&lt;p&gt;The best is to have your tests cover one hundred
percent of your code but that&amp;rsquo;s not always possible. Sometimes
certain functions take to long and can&amp;rsquo;t always be implemented
in a test as tests are meant to be short as possible. Still though,
shooting for one hundred percent code coverage is always a good goal
strive for.&lt;/p&gt;
&lt;p&gt;There are tons of platforms out there to implement CI and measure
code coverage for your projects. The two I will be discussing in
this article is &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis CI&lt;/a&gt; for continuous
integration and &lt;a href=&#34;https://codecov.io&#34;&gt;Codecov&lt;/a&gt; for code coverage.
This article will require you have a Github account and be familiar
with &lt;code&gt;git&lt;/code&gt; so go grab one if you do not already have one.
If you are unfamiliar with git, make sure to read my other
articles on &lt;a href=&#34;https://barloweanalytics.com/git/gitintro/&#34;&gt;learning to use git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;One last note is that Pytest will be the python testing suite
I will be using for all the tests. I&amp;rsquo;m sure others will work
with this setup just fine I&amp;rsquo;m just not familiar with the exact
syntax to get them to run. Also if you don&amp;rsquo;t have any tests
written for your code then the rest of this article will be
useless to you as well. So go write some tests for your code
and then come back!&lt;/p&gt;
&lt;h1 id=&#34;setting-up-travis-ci&#34;&gt;Setting up Travis-CI&lt;/h1&gt;
&lt;p&gt;Shown below is similar to what you will see when
you visit the &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis CI Homepage&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://barloweanalytics.com/posts/img/travishomepage.png&#34; alt=&#34;&amp;lsquo;Travis CI Home Page&#34;&gt;&lt;/p&gt;
&lt;p&gt;Hit the big green signup button and it will take you to a page
that will have you enter your Github credentials. Enter those
and then authorize Travis CI to access your Github repos. Click
that big green button as well and then Travis should take you
to a page that looks like this:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://barloweanalytics.com/posts/img/travisdash.png&#34; alt=&#34;&amp;lsquo;Travis CI Dash&#34;&gt;&lt;/p&gt;
&lt;p&gt;Click the slider button next to the repo you want to have Travis
CI monitor and then click on the Settings button next to it and
make sure that &amp;ldquo;Build pushed branches&amp;rdquo; and &amp;ldquo;Build pushed pull requests&amp;rdquo;
slider buttons are also checked as well. Ok now Travis is ready to
the run project&amp;rsquo;s tests with each push to the Github repo.&lt;/p&gt;
&lt;p&gt;Don&amp;rsquo;t push anything though because Travis won&amp;rsquo;t know what to do with it
because we haven&amp;rsquo;t written the &lt;code&gt;.travis.yml&lt;/code&gt; file for the repo.
&lt;a href=&#34;https://en.wikipedia.org/wiki/YAML&#34;&gt;YAML&lt;/a&gt; stands for &amp;ldquo;YAML ain&amp;rsquo;t
markup language&amp;rdquo; and is a common format for configuration files.&lt;/p&gt;
&lt;p&gt;So create a &lt;code&gt;.travis.yml&lt;/code&gt; file inside the root directory of the repo
on your computer and we&amp;rsquo;ll create a basic one for our Travis CI
build below. You can read more about the options you can have in
the &lt;code&gt;.travis.yml&lt;/code&gt; file &lt;a href=&#34;https://docs.travis-ci.com/user/customizing-the-build/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;language: python
python:
    - &amp;quot;3.6&amp;quot;

install:
    pip install -r requirements.txt

script:
    - pytest -s test_unit.py
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are a lot of configurations you can put in your &lt;code&gt;.travs.yml&lt;/code&gt; file
but for now this basic one will get your tests up and running. Let&amp;rsquo;s break
it down. &lt;code&gt;language&lt;/code&gt; tells Travis what language you will be running the tests
in. This case is python but it could be anything: c++, java, ruby etc. The
&lt;code&gt;python&lt;/code&gt; tells Travis which version of Python we want to run the tests in. This
one is Python 3.6. If you are using a different version of Python please change
this to reflect that version.&lt;/p&gt;
&lt;p&gt;If your tests require any non standard packages you would tell Travis that
in the &lt;code&gt;intsall&lt;/code&gt; section of the YAML file. A &lt;code&gt;requirements.txt&lt;/code&gt; file holds
all the Python packages the code needs to run and Travis installs them before
it trys to run your tests. Not adding this line will cause automatic failure
of your tests due to &lt;code&gt;ImportErrors&lt;/code&gt; if the code uses non base Python packages.&lt;/p&gt;
&lt;p&gt;Next is the &lt;code&gt;script&lt;/code&gt; part of the YAML file. Here Travis looks to see exactly
what tests we want to run each time we push to the repo. Our file is telling
Travis to run the &lt;code&gt;test_unit.py&lt;/code&gt; file and take the output of those tests to
determine whether our build is successful or not. Change &lt;code&gt;test_unit.py&lt;/code&gt; to
whatever the name of your test file is and Travis will run that instead.
Travis will only determine the build is successful if all the tests pass;
if any test fails it will determine that the build is failing.&lt;/p&gt;
&lt;p&gt;Save this file and then push it to your repo on Github. Goto your Build History
on Travis CI and you will see Travis spinning up a virtual machine with the
settings you passed it in the &lt;code&gt;.travis.yml&lt;/code&gt; file. This is after a successful
test for my &lt;code&gt;nba_scraper&lt;/code&gt; package but the look should be similar.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://barloweanalytics.com/posts/img/travisbuild.png&#34; alt=&#34;Travis build&#34;&gt;&lt;/p&gt;
&lt;p&gt;If all the tests pass the build will turn green and if they fail then
it will turn red. And now you have Continous Integration setup for your
python project! This means that every time you push a commit to your
python project Github repo, Travis will clone the repo and run the tests.&lt;/p&gt;
&lt;p&gt;One last thing to mention is that if you&amp;rsquo;d like the build badge on your
Github repo README.md just click on the badge you see on the Travis
build page and select the Markdown option. Take markdown it gives you
and paste it at the top your README.md file commit and push to the Github
repo and you&amp;rsquo;ll have your own shiny build: passing badge.&lt;/p&gt;
&lt;h1 id=&#34;setting-up-codecov&#34;&gt;Setting up Codecov&lt;/h1&gt;
&lt;p&gt;Ok know that Travis CI is up and running with the repo adding the
Code Coverage reports is just a few more steps. First you need to
&lt;code&gt;pip install pytest-cov codecov&lt;/code&gt; and add the packages to your
&lt;code&gt;requirements.txt&lt;/code&gt; file so Travis will know to install them as well.&lt;/p&gt;
&lt;p&gt;Next go to &lt;a href=&#34;https://codecov.io&#34;&gt;Codecov&lt;/a&gt; and link your Github account.
Codecov will then show a page saying no repos are linked to it and
giving you a repository upload token. You won&amp;rsquo;t need that because
Codecov doesn&amp;rsquo;t require the token from &lt;strong&gt;public repositories&lt;/strong&gt; originating
from Travis CI, Circle CI, or AppVeyor CI. If you want to pass
private repositories then you will need to add that to your &lt;code&gt;.travis.yml&lt;/code&gt;
file.&lt;/p&gt;
&lt;p&gt;Now that your Codecov account is created, the next step is to edit
the &lt;code&gt;.travis.yml&lt;/code&gt; file to tell Travis to run it after our tests
are done. So open the &lt;code&gt;.travis.yml&lt;/code&gt; file and add these lines to it&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;language: python
python:
    - &amp;quot;3.6&amp;quot;

install:
    pip install -r requirements.txt

script:
    - pytest -s --cov=nba_scraper test_unit.py

env:
    - CODECOV_TOKEN=&amp;lt;token&amp;gt;#IF ONLY YOU HAVE A PRIVATE REPOSITORY

after_success:
    - codecov
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So its basically the same except for a couple differences. First
is the &lt;code&gt;--cov=nba_scraper&lt;/code&gt; flag to pytest. This tells pytest to measure
coverage for my &lt;code&gt;nba_scraper&lt;/code&gt; module. You would change this name to whatever
the name of the folder is holding your python module. The second part
is &lt;code&gt;after_success:&lt;/code&gt;. This section tells Travis what to do after the tests
are passed which in this case is to send the report to Codecov.&lt;/p&gt;
&lt;p&gt;And that&amp;rsquo;s it! Now save the &lt;code&gt;.travis.yml&lt;/code&gt; file and push to Github.
Travis will do it&amp;rsquo;s thing and then send the code coverage report to
Codecov and you should see something like this on your Codecov main
page:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://barloweanalytics.com/posts/img/codecovdash.png&#34; alt=&#34;Codecov Dashboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;nba_scraper&lt;/code&gt; would be replaced with the name of whatever repository
you were pushing to Github. And now the only thing left to do is to
get the badge for your repo&amp;rsquo;s README.md. Click on your repo&amp;rsquo;s name
from the main page and then goto Settings. On the left will be a Badge
section, click on that and copy the markdown option. Repeate the process
of adding it to the repo&amp;rsquo;s README.md just like you did with Travis. Commit
and push and now you have a shiny code coverage badge next to your
build badge.&lt;/p&gt;
&lt;p&gt;If you have any questions/concerns or notice any errors please feel
free to email me at &lt;a href=&#34;mailto:matt@barloweanalytics.com&#34;&gt;matt@barloweanalytics.com&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;sources&#34;&gt;Sources:&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://dev.to/j0nimost/using-codecov-with-travis-ci-pytest-cov-1dfj&#34;&gt;Using Codecov with Travis CI&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://aws.amazon.com/devops/continuous-integration/&#34;&gt;Continuous Integration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.codecov.io/docs/frequently-asked-questions&#34;&gt;Codecov FAQ&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/195008/what-is-code-coverage-and-how-do-you-measure-it&#34;&gt;What is code coverage and how do you measure it?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Continuous_integration&#34;&gt;Wikipedia Continuous Integration&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/pytest-cov/&#34;&gt;Pytest-cov&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.pytest.org/en/latest/&#34;&gt;Pytest&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Projects</title>
      <link>https://barloweanalytics.com/projects/</link>
      <pubDate>Sat, 04 May 2019 14:27:59 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/projects/</guid>
      <description>Projects This is a list of all current/past projects I am working on.
nba_scraper This is a python package for scraping the NBA&amp;rsquo;s api and returning a play by play file or pandas dataframe.
PyPi page
Source code
jAvantage This is a java API wrapper for the Alpha Vantage API. Is currently still in construciton but a succesful Jar can be built from the source code
Source code
The Seventhman This is a NBA stats website I built using the nba_scraper.</description>
      <content>&lt;h1 id=&#34;projects&#34;&gt;Projects&lt;/h1&gt;
&lt;p&gt;This is a list of all current/past projects I am working on.&lt;/p&gt;
&lt;h1 id=&#34;nba_scraper&#34;&gt;&lt;code&gt;nba_scraper&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;This is a python package for scraping the NBA&amp;rsquo;s api and returning
a play by play file or &lt;code&gt;pandas&lt;/code&gt; dataframe.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pypi.org/project/nba-scraper/&#34;&gt;PyPi page&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mcbarlowe/nba_scraper&#34;&gt;Source code&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;javantage&#34;&gt;&lt;code&gt;jAvantage&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;This is a java API wrapper for the &lt;a href=&#34;https://www.alphavantage.co&#34;&gt;Alpha Vantage&lt;/a&gt;
API. Is currently still in construciton but a succesful Jar can be built from
the source code&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/mcbarlowe/jAvantage&#34;&gt;Source code&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;the-seventhman&#34;&gt;The Seventhman&lt;/h1&gt;
&lt;p&gt;This is a NBA stats website I built using the &lt;code&gt;nba_scraper&lt;/code&gt;. You can visit it at
&lt;a href=&#34;https://theseventhman.net&#34;&gt;theseventhman.net&lt;/a&gt;. The source code for it can be found
&lt;a href=&#34;https://github.com/mcbarlowe/seventhmanapp&#34;&gt;here&lt;/a&gt;. &lt;strong&gt;Site no longer maintained.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;the-seventhman-api&#34;&gt;The Seventhman API&lt;/h1&gt;
&lt;p&gt;I have made the API that my website consumes completely public. You can pull the
data from the API using the docs written &lt;a href=&#34;https://github.com/mcbarlowe/seventhmanapi&#34;&gt;here&lt;/a&gt;. &lt;strong&gt;Site no longer maintained.&lt;/strong&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Install</title>
      <link>https://barloweanalytics.com/sql/install/</link>
      <pubDate>Thu, 18 Apr 2019 23:38:39 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/sql/install/</guid>
      <description>by Matthew Barlowe  This tutorial will cover the basics of getting PostgreSQL setup on your computer and running. We won&#39;t actually be working with data in this article, but instead the focus is on the nuts and bolts of what PostgreSQL is and and its structure. But before I get into all that let&#39;s start at the beginning. As always these tutorials will be focused on working in a Mac OS X environment.</description>
      <content>&lt;h2&gt; by Matthew Barlowe&lt;/h2&gt;
&lt;br /&gt;
&lt;p&gt; This tutorial will
cover the basics of getting PostgreSQL setup on your computer and running. We won&#39;t actually
be working with data in this article, but instead the focus is on the nuts and bolts
of what PostgreSQL is and and its structure. But before I get into all that let&#39;s start
at the beginning. As always these tutorials will be focused on working in a Mac OS X
environment. The Postgres commands and the SQL syntax should work no matter what, but
the details of installing will be different on a Windows system.&lt;/p&gt;
&lt;h2&gt;What is SQL?&lt;/h2&gt;
&lt;p&gt;SQL, or sequel as its commonly pronounced, is bascially an acronym that stands for
Structured Querying Language. SQL has been around forever since 1974 and isn&#39;t anywhere
near cutting edge in technology. Some may see this as a drawback, but it also has its
advantages as well. One being that it&#39;s a well documented system and language, and two
is that most people are at least somewhat familiar with its terminology.&lt;/p&gt;
&lt;p&gt;But what does SQL do? Well SQL is the language used to query and manipulate data
in a relational database system. And a relational database system is a system that uses
the relational model; a model consisting of unique keys to create
relations between different tables on the database. Its not really important you
understand this all right now but just keep it in mind for future tutorials.&lt;/p&gt;
&lt;h2&gt;What is PostgreSQL?&lt;/h2&gt;
&lt;p&gt;PostgreSQL is just a flavor of SQL. I chose this one for several reasons. One being
it is noted for its speed, and secondly because it is open source and therefore free.
There are plenty other choices out there such as MySQL or SQLite3 that are perfectly
suitable, but these tutorials will focus on Postgres as it is the one I am most comfortable
using. There are differences between these options, but the basic commands we
wil go over in this series should be universal between all of these systems, however I can&#39;t
speak for all of them as there may be slight differences in syntax.&lt;/p&gt;
&lt;p&gt;Still the majority of the lessons learned using PostgreSQL and these tutorials will
be portable. &lt;/p&gt;
&lt;h2&gt;Installing PostgreSQL&lt;/h2&gt;
&lt;p&gt;To get PostgreSQL onto our system we are going to use Homebrew to install the files. If
you don&#39;t have Homebrew please refer to this [tutorial](https://barloweanalytics.com/unix/homebrew/) to get
it up and running. So like our other brew installations, Postgres is installed with a
command you may find familiar if you&#39;ve been following these tutorials.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
$ brew install postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you&#39;ll see a whole bunch of text on the screen showing Homebrew installing the
PostgreSQL files. It&#39;s often a good idea to skim this output even if you don&#39;t understand
it as sometimes the output will have very important info. When installing PostgreSQL this
is one of those times. Because at the bottom it will give you two commands: &lt;code&gt;pg_ctl
-D /usr/local/var/postgres start&lt;/code&gt; and &lt;code&gt;brew services start postgresql&lt;/code&gt;
&lt;p&gt;There are two major difference between these commands the first one will just start up
the postgres server manually. If you ever shut down the computer then you will have to
start the server again. The second one will keep Postgres running in the background at all
times. This is the option I use, but depending on your computer it may not be best for you.
If you just want to manually start and stop the server you&#39;d use the first command above
to start it and this one to stop it: &lt;code&gt;pg_ctl -D /usr/local/var/postgres stop&lt;/code&gt;.
So choose whichever option you&#39;d like and start up your new Postgres server!
&lt;h2&gt;Logging in to Postgres&lt;/h2&gt;
&lt;p&gt;Ok now that your server is up and running you&#39;ll need to login into the Postgres server
before you can do anything:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
$ psql postgres
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;psql&lt;/code&gt; command is what logs you into the Postgres database server and &lt;code&gt;postgres&lt;/code&gt; is
a default database that is created whenever you create/install the Postgres server itself.
This database is used by third party programs and it will be the database you connect to
run database maintenance commands.&lt;/p&gt;
&lt;p&gt;So after you type the above command you should see that your prompt changes to something
like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;psql (10.3, server 10.1)
Type &amp;quot;help&amp;quot; for help.

postgres=#
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A couple notes about background things before we go further. When you brew postgres
Homebrew does a couple things behind the scenes. It tells you in the text it prints out, but
I&#39;m going to highlight them here to make it easier for you. First Homebrew creates a superuser
for the Postgres server with the same name as the OS X User you are currently logged in as.&lt;/p&gt;
&lt;p&gt;Secondly it sets trust authentication for local connections meaning you don&#39;t need to provide a
password to log into the data base. Obviously, this is a huge security flaw and if you were
going to provide outside access you would change that, but for our purposes in these tutorials
we won&#39;t get into how to do that.&lt;/p&gt;
&lt;p&gt;Ok back to the prompt above. As you can see it tells us what version Postgres we are running,
and that we can type help for help. But if you&#39;re like me, I find when I&#39;m learning something new
those help menus offer no help at all until I get a little knowledge about the system. The next
line is where we&#39;ll actually put our commands for the Postgres server. That line tells us we
are connected to the &lt;code&gt;postgres&lt;/code&gt; database and the &lt;code&gt;#&lt;/code&gt; informs you that you are logged
in as a superuser.&lt;/p&gt;
&lt;p&gt;As with my rant in other tutorials about using &lt;code&gt;sudo&lt;/code&gt; unless you know
what you are doing don&#39;t work as a superuser if you can avoid it. So we are going to create
another user and give them database creation privileges:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;postgres=# CREATE ROLE username WITH LOGIN PASSWORD &#39;quoted password&#39;;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You would change &lt;code&gt;username&lt;/code&gt; and &lt;code&gt;&#39;quoted password&#39;&lt;/code&gt; with whatever values
you wanted. Next will give our new user the ability to create a database:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;postgres=# ALTER ROLE username CREATEDB;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2&gt;Creating Your First Database&lt;/h2&gt;
&lt;p&gt;Ok now that we&#39;ve created our new user lets logout of the superuser with &lt;code&gt;\q&lt;/code&gt; and
log in with your new user with this command &lt;code&gt;psql -U username postgres&lt;/code&gt;. The &lt;code&gt;-U&lt;/code&gt;
flag just tells postgres that you want to login with that particular user and &lt;code&gt;postgres&lt;/code&gt;
is again just the name of the database. Normally you would be asked for the password you created
for the role, but remember that local connections are trusted so you won&#39;t need to enter it.
&lt;p&gt;Ok now you should see a command line that looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;psql (10.3, server 10.1)
Type &amp;quot;help&amp;quot; for help.

postgres=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see our &lt;code&gt;#&lt;/code&gt; has changed to a &lt;code&gt;&amp;gt;&lt;/code&gt; indciating that we are not a superuser anymore. So now you&amp;rsquo;re
logged in to your new user lets create a database that we are going to load our data into so we can
play around with it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;postgres=&amp;gt; CREATE DATABASE baseballstats;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;At this moment I&#39;ll point out, if you haven&#39;t noticed, that all SQL commands and queries will end with
a semicolon. This let&#39;s the system know that it has reached the end of the query and there are no more
words to parse. If you hit enter without a semicolon a new terminal will pop up with the &lt;code&gt;=&lt;/code&gt; changed
to a &lt;code&gt;-&lt;/code&gt;. This means that Postgres is expecting more commands and it will wait until you pass it a semicolon.
This is helpful if you are working with complex queries and you can break them up to make them easier to read,
but can be annoying if you are wondering why your commands aren&#39;t working.&lt;/p&gt;
&lt;p&gt;So to check and make sure our database is created type &lt;code&gt;\l&lt;/code&gt; into the terminal.
This command will give you a list of all the databases on the Postgres server. Commands
beginning with a &lt;code&gt;\&lt;/code&gt;, also known as &lt;code&gt;psql&lt;/code&gt; commands, don&amp;rsquo;t need a semicolon and will throw an error
if you use one. It is a little confusing but one way to keep it apart is that commands that directly
deal with the data itself need semicolons and commands that interact with the actual database don&amp;rsquo;t. You
should see some output similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;                                       List of databases
     Name      |    Owner    | Encoding |   Collate   |    Ctype    |      Access privileges
---------------+-------------+----------+-------------+-------------+-----------------------------
 baseballstats | MattBarlowe | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 postgres      | MattBarlowe | UTF8     | en_US.UTF-8 | en_US.UTF-8 |
 template0     | MattBarlowe | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/MattBarlowe             +
               |             |          |             |             | MattBarlowe=CTc/MattBarlowe
 template1     | MattBarlowe | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/MattBarlowe             +
               |             |          |             |             | MattBarlowe=CTc/MattBarlowe
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You should see the &lt;code&gt;baseballstats&lt;/code&gt; in the table and that the Owner of the database is
the username you created. As &lt;code&gt;Owner&lt;/code&gt; of the database that means you have superuser powers over it and
that nobody can even read it until you give them acess to the database.&lt;/p&gt;
&lt;h2&gt;Importing Data to the Database&lt;/h2&gt;
&lt;p&gt;So we have created our new &lt;code&gt;baseballstats&lt;/code&gt; database so lets log into it. Start by typing &lt;code&gt;\q&lt;/code&gt;
to log out of the &lt;code&gt;postgres&lt;/code&gt; database and now we&#39;ll use this command to log into our new database
&lt;code&gt;psql -U username baseballstats&lt;/code&gt;, (where username is the username you created above)
and you&#39;ll see your command prompt is now this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;baseballstats=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok so we have our database running but we don&#39;t have any data in yet so that&#39;s our next step. Data in a SQL
database is stored in different tables. And it is the relationships between these tables that forms the basis
of the relational database system I touched on earlier. &lt;/p&gt;
&lt;p&gt;The data I will be using for this tutorial and all future tutorials can be downloaded at this
&lt;a href=&#34;https://drive.google.com/open?id=1h1oyVfW4xLi-hqfgrNjrY-mNlnx0jSaw&#34;&gt;link&lt;/a&gt;. In this zip file
is a PostgreSQL backup of the database I created from the &lt;code&gt;.csv&lt;/code&gt; files from
&lt;a href=&#34;http://www.seanlahman.com/baseball-archive/statistics/&#34;&gt;Sean Lahman&amp;rsquo;s baseball database&lt;/a&gt;. Once the data
is downloaded and unzipped then to load it into the data base all you have to do is this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;psql baseballstats &amp;lt; baseball.bak
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And you&amp;rsquo;ll see a whole bunch of output letting you know the backup is being installed into
the database. Once that is all done log back into your database:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;psql -U username baseballstats
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This will log you into the &lt;code&gt;baseballstats&lt;/code&gt; database and lets make sure the data is all in there
by doing a simple select:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;SELECT * FROM appearances LIMIT 10;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which should produce output similar to this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;yearID | teamID | lgID | playerID  | G_all | GS | G_batting | G_defense | G_p | G_c | G_1b | G_2b | G_3b | G_ss | G_lf | G_cf | G_rf | G_of | G_dh | G_ph | G_pr
--------+--------+------+-----------+-------+----+-----------+-----------+-----+-----+------+------+------+------+------+------+------+------+------+------+------
  1871 | TRO    |      | abercda01 |     1 |  1 |         1 |         1 |   0 |   0 |    0 |    0 |    0 |    1 |    0 |    0 |    0 |    0 |    0 |    0 |    0
  1871 | RC1    |      | addybo01  |    25 | 25 |        25 |        25 |   0 |   0 |    0 |   22 |    0 |    3 |    0 |    0 |    0 |    0 |    0 |    0 |    0
  1871 | CL1    |      | allisar01 |    29 | 29 |        29 |        29 |   0 |   0 |    0 |    2 |    0 |    0 |    0 |   29 |    0 |   29 |    0 |    0 |    0
  1871 | WS3    |      | allisdo01 |    27 | 27 |        27 |        27 |   0 |  27 |    0 |    0 |    0 |    0 |    0 |    0 |    0 |    0 |    0 |    0 |    0
  1871 | RC1    |      | ansonca01 |    25 | 25 |        25 |        25 |   0 |   5 |    1 |    2 |   20 |    0 |    1 |    0 |    0 |    1 |    0 |    0 |    0
  1871 | FW1    |      | armstbo01 |    12 | 12 |        12 |        12 |   0 |   0 |    0 |    0 |    0 |    0 |    0 |   11 |    1 |   12 |    0 |    0 |    0
  1871 | RC1    |      | barkeal01 |     1 |  1 |         1 |         1 |   0 |   0 |    0 |    0 |    0 |    0 |    1 |    0 |    0 |    1 |    0 |    0 |    0
  1871 | BS1    |      | barnero01 |    31 | 31 |        31 |        31 |   0 |   0 |    0 |   16 |    0 |   15 |    0 |    0 |    0 |    0 |    0 |    0 |    0
  1871 | FW1    |      | barrebi01 |     1 |  1 |         1 |         1 |   0 |   1 |    0 |    0 |    1 |    0 |    0 |    0 |    0 |    0 |    0 |    0 |    0
  1871 | BS1    |      | barrofr01 |    18 | 17 |        18 |        18 |   0 |   0 |    0 |    1 |    0 |    0 |   13 |    0 |    4 |   17 |    0 |    0 |    0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; Thats a lot text and its hard to make sense of, but if you are seeing that means we have great success
and your first database is up and running.&lt;/p&gt;
&lt;p&gt;If you come up with a &lt;code&gt;ERROR:  permission denied for relation appearances&lt;/code&gt; when you run the above code
you need to login back into your superuser account (which remember is the same name of the OS X you created
the postgres server in) into the &lt;code&gt;baseballstats&lt;/code&gt; table with this command &lt;code&gt;psql baseballstats&lt;/code&gt;
and then grant privileges to your username you created above with
&lt;code&gt;GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public to username&lt;/code&gt;. After that you should be able to
&lt;code&gt;select&lt;/code&gt; the data normally.&lt;/p&gt;
&lt;h2&gt;Sources:&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#39;https://www.codementor.io/engineerapart/getting-started-with-postgresql-on-mac-osx-are8jcopb&#39;&gt;Getting Started with PostgreSQL on Mac OSX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;http://blog.bradlucas.com/posts/2017-10-06-install-postgresql-on-a-mac-using-brew/&#39;&gt;Install PostgreSQL on Mac using Brew&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://stackoverflow.com/questions/7975556/how-to-start-postgresql-server-on-mac-os-x&#39;&gt;How to Start PostgreSQL Server on Mac OSX&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://gist.github.com/nepsilon/f2937fe10fe8b0efc0cc&#39;&gt;Importing and Exporting CSV Files with PostgreSQL&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://en.wikipedia.org/wiki/Relational_model&#39;&gt;Relational Model&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://gist.github.com/Kartones/dd3ff5ec5ea238d4c546&#39;&gt;psql Cheatsheet&lt;/a&gt; I would definitely bookmark this folks!&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://stackoverflow.com/questions/2370525/default-database-named-postgres-on-postgresql-server&#39;&gt;Default Postgres Database&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://gist.github.com/lxneng/741932&#39;&gt;Postgres Homebrew Output&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://www.youtube.com/watch?v=2OA2lLRe70Q&#39;&gt;Create tables and import CSV&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Loops</title>
      <link>https://barloweanalytics.com/java/loops/</link>
      <pubDate>Thu, 18 Apr 2019 19:07:08 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/java/loops/</guid>
      <description>by Matthew Barlowe Remember all these code snippets must be wrapped in a class method or a public static void main to actually run. For the idea/philosophy behind loops and how to use them go here
for loops for (initialization; termination; increment){ statement(s); } Real world example:
//++ operator increments the value by one for (int i=1; i&amp;lt;11; i++) { System.out.println(&amp;#34;Your number is: &amp;#34; + i); } Infinite loop can be created this way:</description>
      <content>&lt;h1 id=&#34;by-matthew-barlowe&#34;&gt;by Matthew Barlowe&lt;/h1&gt;
&lt;p&gt;Remember all these code snippets must be wrapped in a class method or a
&lt;code&gt;public static void main&lt;/code&gt; to actually run. For the idea/philosophy
behind loops and how to use them go &lt;a href=&#34;https://barloweanalytics.com/python/loops/&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;for-loops&#34;&gt;&lt;code&gt;for&lt;/code&gt; loops&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;initialization&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; termination&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; increment&lt;span style=&#34;color:#f92672&#34;&gt;){&lt;/span&gt;
    statement&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Real world example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;//++ operator increments the value by one
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt;11&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;++)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your number is: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Infinite loop can be created this way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#75715e&#34;&gt;//put code here
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Can also loop over an array like in R/Python like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;1&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;4&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;5&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;2&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;3&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;6&lt;span style=&#34;color:#f92672&#34;&gt;,&lt;/span&gt;7&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; item &lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; numbers&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your number is: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; i&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;while-loops&#34;&gt;&lt;code&gt;while&lt;/code&gt; loops&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 11&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your number is: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    count &lt;span style=&#34;color:#f92672&#34;&gt;++;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;do-while-loops&#34;&gt;&lt;code&gt;do-while&lt;/code&gt; loops&lt;/h1&gt;
&lt;p&gt;The main difference between &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;do-while&lt;/code&gt; loops in java is that
&lt;code&gt;while&lt;/code&gt; loops evaluate the condition for continuing at the beginning of the
loop, and &lt;code&gt;do-while&lt;/code&gt; evaluates its condition at the end of the loop. This means
a &lt;code&gt;do-while&lt;/code&gt; loop will run at least once as opposed to a &lt;code&gt;while&lt;/code&gt; loop which
could never run depending on the condition. You also have to initialize the
variable before you write the loop unlike &lt;code&gt;while&lt;/code&gt; loops where you can
initialize the variable in the loop declaration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; count &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#f92672&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
    System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your number is: &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; count&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    count &lt;span style=&#34;color:#f92672&#34;&gt;++;&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;count &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; 11&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;source&#34;&gt;Source&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://docs.oracle.com/javase/tutorial/java/nutsandbolts/while.html&#34;&gt;&lt;code&gt;while&lt;/code&gt; and &lt;code&gt;do-while&lt;/code&gt;Statments&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://barloweanalytics.com/r/functions/</link>
      <pubDate>Thu, 18 Apr 2019 17:19:29 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/r/functions/</guid>
      <description>#by Matthew Barlowe
This is the syntax for making a function in R:
function.name &amp;lt;- function(arg1, arg2, arg3=2) { variable = arg1 + arg2 print(arg3) variable # the last line of the function is the return value in R }  In R you can also pass an ... argument to a function indicating that the funciton can take any number of name or unnamed arguments as well in the function parameters.</description>
      <content>&lt;p&gt;#by Matthew Barlowe&lt;/p&gt;
&lt;p&gt;This is the syntax for making a function in R:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function.name &amp;lt;- function(arg1, arg2, arg3=2) {
    variable = arg1 + arg2
    print(arg3)
    variable # the last line of the function is the return value in R
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In R you can also pass an &lt;code&gt;...&lt;/code&gt; argument to a function indicating that the funciton
can take any number of name or unnamed arguments as well in the function
parameters. This is similar to Python&amp;rsquo;s &lt;code&gt;*args&lt;/code&gt; and &lt;code&gt;**kwargs&lt;/code&gt; parameters in
funciton defining.&lt;/p&gt;
&lt;h1 id=&#34;sources&#34;&gt;Sources&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://nicercode.github.io/guides/functions/&#34;&gt;Nice R Code&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://barloweanalytics.com/java/helloworld/</link>
      <pubDate>Wed, 17 Apr 2019 23:22:23 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/java/helloworld/</guid>
      <description>Ok Java is a little different than R or Python in that in order to run any code you have to first create a class object. I haven&amp;rsquo;t yet written a tutorial on classes and inheritence which form the basis of Object Oriented Programming.
If you&amp;rsquo;re trying to learn Java coming from Python or R this fact will be very disorienting as you can&amp;rsquo;t can&amp;rsquo;t just type some lines and run them at the command line.</description>
      <content>&lt;p&gt;Ok Java is a little different than R or Python in that in order to run any code you
have to first create a &lt;code&gt;class&lt;/code&gt; object. I haven&amp;rsquo;t yet written a tutorial on classes
and inheritence which form the basis of Object Oriented Programming.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re trying to learn Java coming from Python or R this fact will be very disorienting
as you can&amp;rsquo;t can&amp;rsquo;t just type some lines and run them at the command line. In Java you have
to create a &lt;code&gt;class&lt;/code&gt; first and then create a &lt;code&gt;main&lt;/code&gt; method which will run the lines of code
you want after you compile the code.&lt;/p&gt;
&lt;p&gt;Each class must be stored in its on file as well. This means that everytime you want to
create a new class you have to create a new file &lt;strong&gt;that has the same file name as the
class name&lt;/strong&gt;. The file name also has to end in &lt;code&gt;.java&lt;/code&gt; just like all Python scripts
have to end in &lt;code&gt;.py&lt;/code&gt;. It&amp;rsquo;s a lot to take in that I will explain further in my tutorial on
installing Java, but as of right now let&amp;rsquo;s just write a simple &lt;code&gt;Hello World&lt;/code&gt; program.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Java uses camelCase for its naming conventions. Awful I know.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// unlike Python, Java doesn&amp;#39;t care about whitespace so you can
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// structure your code however you want as each line ends with a
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// semicolon.
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;helloWorld&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color:#75715e&#34;&gt;// the main method will always look like this
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#f92672&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#75715e&#34;&gt;//Look at all that just to print. Also don&amp;#39;t forget your semicolon!
&lt;/span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;        System&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#f92672&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now your program is ready to compile so save it as &lt;code&gt;helloWorld.java&lt;/code&gt; and then type
at the command line &lt;code&gt;java helloWorld.java&lt;/code&gt; and the output will be &lt;code&gt;Hello World&lt;/code&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://barloweanalytics.com/r/helloworld/</link>
      <pubDate>Wed, 17 Apr 2019 23:12:25 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/r/helloworld/</guid>
      <description>by Matthew Barlowe Some simple Hello World code.
print(&amp;quot;Hello World!&amp;quot;) print(&amp;quot;Hello World!&amp;quot;, quote=FALSE) print(paste(&amp;quot;Hello&amp;quot;, &amp;quot;World!&amp;quot;))  produces this output:
&amp;quot;Hello World!&amp;quot; Hello World! &amp;quot;Hello World!&amp;quot;  </description>
      <content>&lt;h1 id=&#34;by-matthew-barlowe&#34;&gt;by Matthew Barlowe&lt;/h1&gt;
&lt;p&gt;Some simple Hello World code.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;print(&amp;quot;Hello World!&amp;quot;)
print(&amp;quot;Hello World!&amp;quot;, quote=FALSE)
print(paste(&amp;quot;Hello&amp;quot;, &amp;quot;World!&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;produces this output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;quot;Hello World!&amp;quot;
Hello World!
&amp;quot;Hello World!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</content>
    </item>
    
    <item>
      <title>Loops</title>
      <link>https://barloweanalytics.com/r/loops/</link>
      <pubDate>Wed, 17 Apr 2019 20:51:38 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/r/loops/</guid>
      <description>by Matthew Barlowe This is a tutorial going over the syntax of loops in R. If you want a break down of how loops work and the philosophy please read my Python loop tutorial. Loops should be a last resort in R as they are slow and inefficient. Often you can do what you need to in loops using the apply family of functions or the purrr package.
for loops for (i in 1:10) { print(paste(&amp;#34;Your number is&amp;#34;, i)) } some_numbers &amp;lt;- c(1,3,5,3,0,10,35) for (i in some_numbers) { print(paste(&amp;#34;Your number is&amp;#34;, i)) } while loops answer &amp;lt;- readline(prompt=&amp;#34;What&amp;#39;s the best part about Matt?</description>
      <content>&lt;h1 id=&#34;by-matthew-barlowe&#34;&gt;by Matthew Barlowe&lt;/h1&gt;
&lt;p&gt;This is a tutorial going over the syntax of loops in R. If you want a break down
of how loops work and the philosophy please read my &lt;a href=&#34;https://barloweanalytics.com/python/loops/&#34;&gt;Python loop tutorial&lt;/a&gt;.
Loops should be a last resort in R as they are slow and inefficient. Often you can do
what you need to in loops using the &lt;a href=&#34;https://www.guru99.com/r-apply-sapply-tapply.html&#34;&gt;&lt;code&gt;apply&lt;/code&gt;&lt;/a&gt;
family of functions or the &lt;a href=&#34;https://purrr.tidyverse.org/&#34;&gt;&lt;code&gt;purrr&lt;/code&gt;&lt;/a&gt; package.&lt;/p&gt;
&lt;h1 id=&#34;for-loops&#34;&gt;&lt;code&gt;for&lt;/code&gt; loops&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;for &lt;/span&gt;(i in &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your number is&amp;#34;&lt;/span&gt;, i))
}

some_numbers &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;c&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;35&lt;/span&gt;)

&lt;span style=&#34;color:#a6e22e&#34;&gt;for &lt;/span&gt;(i in some_numbers) {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;paste&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Your number is&amp;#34;&lt;/span&gt;, i))
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;while-loops&#34;&gt;&lt;code&gt;while&lt;/code&gt; loops&lt;/h1&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-r&#34; data-lang=&#34;r&#34;&gt;answer &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readline&lt;/span&gt;(prompt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;What&amp;#39;s the best part about Matt? &amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#a6e22e&#34;&gt;while &lt;/span&gt;(answer &lt;span style=&#34;color:#f92672&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;He&amp;#39;&lt;/span&gt;s Awesome&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;) {
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    print(&amp;#34;&lt;/span&gt;Sorry, that isn&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;t the correct answer.&amp;#34;)
&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;    answer &amp;lt;- readline(prompt=&amp;#39;&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#960050;background-color:#1e0010&#34;&gt;)&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;repeat-loops&#34;&gt;&lt;code&gt;repeat&lt;/code&gt; loops&lt;/h1&gt;
&lt;p&gt;These loops aren&amp;rsquo;t present in Python. &lt;code&gt;repeat&lt;/code&gt; loops are similar to &lt;code&gt;while&lt;/code&gt; loops except
that &lt;code&gt;repeat&lt;/code&gt; loops require the user to explicitly break the loop when the condition is met
instead of doing it automatically like &lt;code&gt;while&lt;/code&gt; loops. Here is the example above
rewritten as a &lt;code&gt;repeat&lt;/code&gt; loop.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-R&#34; data-lang=&#34;R&#34;&gt;answer &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readline&lt;/span&gt;(prompt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;What&amp;#39;s the best part about Matt? &amp;#34;&lt;/span&gt;)
repeat {
    &lt;span style=&#34;color:#a6e22e&#34;&gt;if&lt;/span&gt;(answer &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;He&amp;#39;s Aweseome&amp;#34;&lt;/span&gt;){
        break
    }
    &lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sorry, that isn&amp;#39;t the correct answer.&amp;#34;&lt;/span&gt;)
    answer &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;readline&lt;/span&gt;(prompt&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;sources&#34;&gt;Sources&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://stackoverflow.com/questions/29215589/while-vs-repeat-loops-in-r&#34;&gt;While vs. Repeat Loops in R&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;I hate linking to this because it&amp;rsquo;s Datacamp but it&amp;rsquo;s free so hopefully they aren&amp;rsquo;t making money off it&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.datacamp.com/community/tutorials/tutorial-on-loops-in-r&#34;&gt;Tutorial on Loops in R&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Functions</title>
      <link>https://barloweanalytics.com/python/functions/</link>
      <pubDate>Wed, 17 Apr 2019 20:51:24 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/python/functions/</guid>
      <description>by Matthew Barlowe What is a function? Basically &amp;ldquo;a function is a block of code which only runs when it is called.&amp;quot; But what does that mean? It means that you have set aside a set of code inside your overall program that won&amp;rsquo;t run unless you specifically tell the computer that you want to run it. Still doesn&amp;rsquo;t make sense? Let&amp;rsquo;s look at it in action. Create a file let&amp;rsquo;s call it test.</description>
      <content>&lt;h3 id=&#34;by-matthew-barlowe&#34;&gt;by Matthew Barlowe&lt;/h3&gt;
&lt;p&gt;What is a function? Basically &lt;a href=&#34;https://www.w3schools.com/python/python_functions.asp&#34;&gt;&amp;ldquo;a function is a block of code which only runs when it is called.&amp;quot;&lt;/a&gt;
But what does that mean? It means that you have set aside a set of code inside your overall program
that won&amp;rsquo;t run unless you specifically tell the computer that you want to run it. Still doesn&amp;rsquo;t make
sense? Let&amp;rsquo;s look at it in action. Create a file let&amp;rsquo;s call it &lt;code&gt;test.py&lt;/code&gt; and add this code to it:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def our_function():
    print(&amp;quot;This code is our function&amp;quot;)

print(&amp;quot;This code is not our function&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok lets talk a little about the syntax before diving in deeper about how the
code works. In python functions are declared using &lt;code&gt;def&lt;/code&gt; (short for define) which
tells Python we are declaring a function. &lt;code&gt;our_function&lt;/code&gt; is what we want to
call the function and the &lt;code&gt;()&lt;/code&gt; will tell what parameters we want to pass
to the function. In this case there are no parameters but you still need the
&lt;code&gt;()&lt;/code&gt;. The &lt;code&gt;:&lt;/code&gt; is also required at the end of every function declaration just like
with &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; loops. Also all code inside a function has to be indented
four spaces to tell the Python interpretor that those lines of code belongs to the function
just like you have to do with loops.&lt;/p&gt;
&lt;p&gt;So if you ran that code what would expect the output to be? If you said just
&lt;code&gt;This code is not our function&lt;/code&gt; then you would be correct. Python effectively
ignored our function when it runs the &lt;code&gt;test.py&lt;/code&gt; file because we didn&amp;rsquo;t &lt;strong&gt;specifically&lt;/strong&gt;
tell our script to run that code. So how do you tell your script you want to run
that function? You do so by doing what&amp;rsquo;s known as  &amp;ldquo;calling the function.&amp;rdquo; This is
done by simply typing the functions name like this &lt;code&gt;our_function()&lt;/code&gt; in your code.
For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def our_function():
    print(&amp;quot;This code is our function&amp;quot;)

print(&amp;quot;This code is not our function&amp;quot;)
our_function()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you run that script now you will get this output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;This code is not our function
This code is our function
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;function-parameters&#34;&gt;Function Parameters&lt;/h1&gt;
&lt;p&gt;What are function parameters? Function paramaters are values you pass to the function
whenever you call the function in your code. You normally pass the function paramters
because you want to do something to them inside the code of the function.
Our function above didn&amp;rsquo;t have any paramaters because there was nothing in the &lt;code&gt;()&lt;/code&gt;
when we decalred the function. But lets look at a function with parameters:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def new_function(x, y):
    print(x*y)

new_function(6,3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What do you think the output of our new function will be? If you guessed &lt;code&gt;18&lt;/code&gt; you are
correct! In this case our parameters are &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt; in &lt;code&gt;new_function&lt;/code&gt;. So when we
call the function what we put inside the parentheses becomes the value of the parameters
of the function. The values are assigned in order as they are passed to the function call
so &lt;code&gt;x&lt;/code&gt; is equal to 6 and &lt;code&gt;y&lt;/code&gt; is equal to three. If our function was declared like this
&lt;code&gt;def new_function(y, x)&lt;/code&gt; then &lt;code&gt;y&lt;/code&gt; would be equal to six and &lt;code&gt;x&lt;/code&gt; would be equal to three.&lt;/p&gt;
&lt;p&gt;This is an important concept to remember when passing parameters to a function. If you don&amp;rsquo;t
pass the parameters in the correct order to the function call then the outputs will be
incorrect.&lt;/p&gt;
&lt;h1 id=&#34;function-return&#34;&gt;Function Return&lt;/h1&gt;
&lt;p&gt;So you created a function and you passed it parameters to do something to, but what
if you need to get the output of what your code does and store it in another variable?
This is where the &lt;code&gt;return&lt;/code&gt; keyword comes in. Using our above example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def new_function(x, y):
    print(x*y)
    return x*y

x = new_function(6,3)
print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What do you think the output of this script will be? If you guessed this you are correct&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;18
18
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see the function prints out the value of &lt;code&gt;x*y&lt;/code&gt; and then returns that value
when has completed running. We take that value the funciton &lt;code&gt;new_function&lt;/code&gt; returned and
stored it in the variable &lt;code&gt;x&lt;/code&gt; and then printed the value of &lt;code&gt;x&lt;/code&gt; which is another 18.&lt;/p&gt;
&lt;p&gt;One quick thing I want to touch on before we move on is the fact I use &lt;code&gt;x&lt;/code&gt; as a variable twice
in this example. Are they the same variable? No they are two completely different
variables. The &lt;code&gt;x&lt;/code&gt; variable that is the function parameter only exists within the function
itself. This idea is known as the variables scope. The scope is the area in which a variable
can be used, any use outside that area will result in an error. Try running this code:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def new_function(x, y):
    print(x*y)
    return x*y

new_function(6,3)
print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will produce this output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;18
Traceback (most recent call last):
  File &amp;quot;test.py&amp;quot;, line 6, in &amp;lt;module&amp;gt;
    print(x)
NameError: name &#39;x&#39; is not defined
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even though we create &lt;code&gt;x&lt;/code&gt; and assign it a value when we call the function, that variable only
exists inside the code of that function once we try to use it outside that scope Python throws
and error. Scope will be very important in the next section.&lt;/p&gt;
&lt;h1 id=&#34;functions-in-functions&#34;&gt;Functions in Functions&lt;/h1&gt;
&lt;p&gt;Yes you can have funcions inside your functions, and if you wanted even functions inside those other functions.
Here&amp;rsquo;s an example&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def math_function(x,y):

    def add_function(x,y):
        return x + y

    def subtract_function(x,y):
        return x - y

    return add_function(x,y), subtract_function(x,y)

x, y = math_functions(6,3)
print(x, y)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;What do you think the output of this would be? If you guessed &lt;code&gt;9 3&lt;/code&gt; you are correct. There&amp;rsquo;s
a couple new things in this one I want to touch on before we continue. A function can return as
many things you want it to just seperate the values with a comma in the &lt;code&gt;return&lt;/code&gt; statement as seen
in &lt;code&gt;return add_function(x,y), subtract_function(x,y)&lt;/code&gt; and then you can assign them to individual
variables seperated by a comma as seen in &lt;code&gt;x, y = math_functions(6,3)&lt;/code&gt; where the first variable
will be the first value returned, the second variable the second value etc.&lt;/p&gt;
&lt;p&gt;As you can see here we created functions of &lt;code&gt;add_function&lt;/code&gt; and &lt;code&gt;subtract_function&lt;/code&gt; inside our
larger &lt;code&gt;math_function&lt;/code&gt; function. But remember like the &lt;code&gt;x&lt;/code&gt; variable above the &lt;code&gt;add_function&lt;/code&gt;
and the &lt;code&gt;subtract_function&lt;/code&gt; only exist inside the &lt;code&gt;math_function&lt;/code&gt;. You can&amp;rsquo;t call them in the main
part of your script without getting an error. If you wanted to be able to call them anywhere
in the file you would need to define the outside of the &lt;code&gt;math_function&lt;/code&gt; like so:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def add_function(x,y):
    return x + y

def subtract_function(x,y):
    return x - y

def math_function(x,y):
    return add_function(x,y), subtract_function(x,y)

print(add_function(6,3))
print(subtract_function(6,3))
print(math_function(6,3))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One last thing is that you shouldn&amp;rsquo;t variables inside the scopre of your function like I did
in the example above. You technically can but its considered bad programming form as you can easily
confuse what the variables represent at any given time in the code and makes it hard for others
to read.&lt;/p&gt;
&lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;Functions are a key part to becoming a better programmer. But now that you know the how let&amp;rsquo;s talk
a little about the why. Functions help programmers follow the &amp;ldquo;Don&amp;rsquo;t Repeat Yourself&amp;rdquo; paradigm discussed
in our &lt;a href=&#34;https://barloweanalytics.com/python/loops/&#34;&gt;loops tutorial&lt;/a&gt;. They allow you to run a set of code over an over again
without having to manually type it out every time. Functions also allow us to name a set of operations
so that we know what those operations do without having to read the source code of the function. Like
our example you may not know what exactly was in the &lt;code&gt;add_function&lt;/code&gt; but you could sort of figure out
that by its name the function did some sort of addition. This is also why using intuitive names for your
functions is important as well.&lt;/p&gt;
&lt;p&gt;Functions should also be fairly short and to the point. Functions are best when they do one thing very
well. That one thing may &lt;strong&gt;have&lt;/strong&gt; to be very complex sometimes, but the simpler your functions are the easier
they are to debug when things go wrong and things will go wrong. So some guidlines to take away from this
when writing your functions in the future are: Short, Simple, Do one thing, Named appropriately.&lt;/p&gt;
&lt;h1 id=&#34;sources&#34;&gt;Sources&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.w3schools.com/python/python_functions.asp&#34;&gt;Python Functions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.w3schools.com/python/python_functions.asp&#34;&gt;What is a Function in Computer Programming&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.cs.utah.edu/~zachary/computing/lessons/uces-10/uces-10/node11.html&#34;&gt;Why Use Funtions&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://pythonspot.com/scope/&#34;&gt;Scope&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://nicercode.github.io/guides/functions/&#34;&gt;Nice R Code&lt;/a&gt; Some good writing behind the philosophy of functions.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Loops</title>
      <link>https://barloweanalytics.com/python/loops/</link>
      <pubDate>Tue, 16 Apr 2019 17:53:57 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/python/loops/</guid>
      <description>by Matthew Barlowe Loops are an important part of programming in any language. So in this tutorial we are going to go over what they do and how to implement them.
In Python there are two typs of loops: the for loop and the while loop. But before we get into the distinction of the two lets talk about why you want to use loops in your programming.
Why loops? There&amp;rsquo;s a phrase in programming you&amp;rsquo;ll hear often if you keep pursuing this hobby/career, and that phrase is, &amp;ldquo;Don&amp;rsquo;t repeat yourself.</description>
      <content>&lt;h2 id=&#34;by-matthew-barlowe&#34;&gt;by Matthew Barlowe&lt;/h2&gt;
&lt;p&gt;Loops are an important part of programming in any language. So in this
tutorial we are going to go over what they do and how to implement them.&lt;/p&gt;
&lt;p&gt;In Python there are two typs of loops: the &lt;code&gt;for&lt;/code&gt; loop and the &lt;code&gt;while&lt;/code&gt; loop.
But before we get into the distinction of the two lets talk about why you want to use
loops in your programming.&lt;/p&gt;
&lt;h1 id=&#34;why-loops&#34;&gt;Why loops?&lt;/h1&gt;
&lt;p&gt;There&amp;rsquo;s a phrase in programming you&amp;rsquo;ll hear often if you keep pursuing this hobby/career,
and that phrase is, &amp;ldquo;Don&amp;rsquo;t repeat yourself.&amp;rdquo; It boils down to if you need to do the same thing
over and over again don&amp;rsquo;t just cut and past the code or &amp;ldquo;write everything twice&amp;rdquo; but try to
abstract the process in to one block of code that just needs to be ran once. Or if you can&amp;rsquo;t
do that then turn the code into a function that can be called when needed.&lt;/p&gt;
&lt;p&gt;But why do this? What does it matter if cutting and pasting the code gets things done faster?
There are couple reasons behind this.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s easier to debug.&lt;/strong&gt; If you only have one block of code to look at to find errors instead of
three or five or whatever you will spend far less time trying to fix it if it breaks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;It&amp;rsquo;s easier to read&lt;/strong&gt; The smaller code is the easier it is to read and understand. Even if you
just work on code by yourself, trust me your future self will thank you for your consideration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;loops-in-action&#34;&gt;Loops in Action&lt;/h1&gt;
&lt;p&gt;So let&amp;rsquo;s say you wanted to print out &amp;ldquo;Let&amp;rsquo;s Go&amp;rdquo; five times. Sure you could put &lt;code&gt;print(&amp;quot;Let&#39;s Go&amp;quot;)&lt;/code&gt;
ten times in your script and run it and get the desired result. But following the ideas discussed
above we don&amp;rsquo;t want to do that. This is where the &lt;code&gt;for&lt;/code&gt; loop comes in. Lets look at some example code&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s Go&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you put that in a file and run it similar to what we did in the &lt;a href=&#34;https://barloweanalytics.com/python/helloworld/&#34;&gt;Hello World&lt;/a&gt;
tutorial it would produce this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Let&#39;s Go
Let&#39;s Go
Let&#39;s Go
Let&#39;s Go
Let&#39;s Go
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So with a &lt;code&gt;for&lt;/code&gt; loop we were able to reduce what would have been five lines of code down to two. In the
grand scheme of things is this trivial? Sure but it&amp;rsquo;s a good habit to get into in the beginning because
its much easier to apply this philosophy at the start of each project than to go back and do it after
the code is written.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s break down exactly what the code did though. Ok the &lt;code&gt;range(5)&lt;/code&gt; creates an ordered group of numbers
starting at 0 and ending at 4. Python always starts counting at 0 unless you tell it not to so just
reprogram yourself to think of 0 as 1. &lt;a href=&#34;https://www.youtube.com/watch?v=VCcd5BsquPw&#34;&gt;It&amp;rsquo;s easy not hard!&lt;/a&gt;
So if it starts at zero then why did you put 5 in there? Why not 4? That&amp;rsquo;s because the end range in a lot
of Python things is not inclusive. 5 tells it where to stop but it doesn&amp;rsquo;t include it in the actual group
of numbers &lt;code&gt;range&lt;/code&gt; returns. I understand all this is a bit counterintuitive and I still mess it up sometimes,
but with practice it will come &amp;hellip; well not naturally but you&amp;rsquo;ll only mess it up half the time instead
of all the time.&lt;/p&gt;
&lt;p&gt;So the &lt;code&gt;range(5)&lt;/code&gt; gives us what we are going to loop over. As you learn more about Python you&amp;rsquo;ll see
that &lt;code&gt;range(5)&lt;/code&gt; is just one of many things you can loop over. The other part of the sentence &lt;code&gt;for x&lt;/code&gt;
is where the looping happens. &lt;code&gt;for x&lt;/code&gt; is actually saying &amp;ldquo;for each item in &lt;code&gt;range(5)&lt;/code&gt;&amp;rdquo;, the &lt;code&gt;x&lt;/code&gt; is just
a variable for that item. You could replace &lt;code&gt;x&lt;/code&gt; with anything:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s Go&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; number &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s Go&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; thingy &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s Go&amp;#34;&lt;/span&gt;)

&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; Bob &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Let&amp;#39;s Go&amp;#34;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;All those blocks of code will produce the same output shown above which is five lines of &amp;ldquo;Let&amp;rsquo;s Go.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Think of &lt;code&gt;for&lt;/code&gt; loops as having a bag of marbles. And like in code you can&amp;rsquo;t do anything else until
you pull every marble out of the bag.  In this analogy &lt;code&gt;range(5)&lt;/code&gt; would be our bag of marbles and &lt;code&gt;for x&lt;/code&gt;
would be the act of us pulling each marble out at a time. The &lt;code&gt;print(&amp;quot;Let&#39;s Go&amp;quot;)&lt;/code&gt; would be what we do
each time we pull a marble out of the bag. So the process would be pull a marble, do something, pull a marble,
do something, etc. until you ran out of marbles. That&amp;rsquo;s a real word equivalent of what we just
told the computer to do with our &lt;code&gt;for&lt;/code&gt; loop above.&lt;/p&gt;
&lt;p&gt;The real power of Python &lt;code&gt;for&lt;/code&gt; loops happens though when you need to do something to each
marble you pull out of the bag. That&amp;rsquo;s where the &lt;code&gt;for x&lt;/code&gt; part comes in. By assigning each item
in the collection to a variable we can do things with those variables as we loop through the collection
For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;):
    print(x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Which produces this output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0
1
2
3
4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;We can print them, perform mathematical operations on them, store them in file for safe keeping etc.
&lt;code&gt;for&lt;/code&gt; loops are a tool that is indispensable not only in Python but in all programming languages as
they form a core concept of programming and computer science. One key aspect though of the variables
we create with a loop is if you have that variable name storing a value somewhere else in your code
the loop will override that value with the last value it has from the loop. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;)
    print(x)
print(x)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The output will be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0
1
2
3
4
4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The value of ten will be overwritten and gone.&lt;/p&gt;
&lt;h1 id=&#34;while-loops&#34;&gt;While Loops&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;while&lt;/code&gt; loops are a bit different than &lt;code&gt;for&lt;/code&gt; loops. &lt;code&gt;for&lt;/code&gt; loops will end when the amount of items
they need to loop over is exhausted. &lt;code&gt;while&lt;/code&gt; loops will continuing looping until a certain logical condition
is met. Which is why you have to be careful when using them because thy can continue forever creating
a condition called an infinite loop that will never terminate unless you force it to. If your program
does this usually a &lt;code&gt;Ctrl+C&lt;/code&gt; is the break signal for most computers to stop running things and if that
doesn&amp;rsquo;t work you can always restart.&lt;/p&gt;
&lt;p&gt;While loops look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;    x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    &lt;span style=&#34;color:#66d9ef&#34;&gt;while&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:
        print(x)
        x &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see the conditional statement in this &lt;code&gt;while&lt;/code&gt; loop is &lt;code&gt;x&amp;lt;5&lt;/code&gt;, and as long as
&lt;code&gt;x&lt;/code&gt; continues to be less than 5 the loop will continue repeating. That&amp;rsquo;s why we have to add
the line &lt;code&gt;x += 1&lt;/code&gt;&lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; in there to increment the value of &lt;code&gt;x&lt;/code&gt; each time the loop repeats. If we
didn&amp;rsquo;t do that then the loop would continue forever.&lt;/p&gt;
&lt;p&gt;#Summary&lt;/p&gt;
&lt;p&gt;Ok lets wrap things up. One last thing about syntax is that both &lt;code&gt;for&lt;/code&gt; and &lt;code&gt;while&lt;/code&gt; loop
lines must end in a &lt;code&gt;:&lt;/code&gt; or else Python will get angry and yell at you.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;for&lt;/code&gt; loops
&lt;ul&gt;
&lt;li&gt;Loop over a collection of items passed to them and performs some code until colleciton is exhausted&lt;/li&gt;
&lt;li&gt;As the loop progresses assigns each item if pulls from the collection to a variable
which you can then use or ignore&lt;/li&gt;
&lt;li&gt;Has the syntax &lt;code&gt;for x in collection:&lt;/code&gt; where &lt;code&gt;collection&lt;/code&gt; is the items you want to loop
over and &lt;code&gt;x&lt;/code&gt; is the variable you assign the piece of the collection the code pulls in that
run through the loop&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;while&lt;/code&gt; loops
&lt;ul&gt;
&lt;li&gt;Loops over a set of commands until a conditional statement is met.&lt;/li&gt;
&lt;li&gt;Any variables use in the loop statment are usually assigned before the loop statement
and not in the loop statement unlike &lt;code&gt;for&lt;/code&gt; loops.&lt;/li&gt;
&lt;li&gt;Has the syntax &lt;code&gt;while condition is true:&lt;/code&gt; where the condition could be &lt;code&gt;x=10&lt;/code&gt;, &lt;code&gt;sky=&#39;blue&#39;&lt;/code&gt;
etc. The condition is whatever you want it to be.&lt;/li&gt;
&lt;li&gt;It is very easy to create infinite loops and must use caution in creating &lt;code&gt;while&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This page is on &lt;a href=&#34;https://github.com/mcbarlowe/website&#34;&gt;Github&lt;/a&gt;. If you see errors feel free to
submit a pull request or contact me on &lt;a href=&#34;https://twitter.com/barloweanalytic&#34;&gt;Twitter&lt;/a&gt; or email
&lt;a href=&#34;mailto:barloweanalytics@gmail.com&#34;&gt;barloweanalytics@gmail.com&lt;/a&gt;.&lt;/p&gt;
&lt;section class=&#34;footnotes&#34; role=&#34;doc-endnotes&#34;&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id=&#34;fn:1&#34; role=&#34;doc-endnote&#34;&gt;
&lt;p&gt;&lt;code&gt;x += 1&lt;/code&gt; is the equivalent of &lt;code&gt;x = x + 1&lt;/code&gt;. You can also do this with other math functions
such as &lt;code&gt;x -= 1&lt;/code&gt; which is the same as &lt;code&gt;x = x - 1&lt;/code&gt; or &lt;code&gt;x *= 1&lt;/code&gt; which is the same as &lt;code&gt;x = x * 1&lt;/code&gt;.
There is no benefit in using one over the other other than to save keystrokes and keep know it
alls on Stack Overflow from trying to uneccesarily improve your code even though you didnt ask
them to.&amp;#160;&lt;a href=&#34;#fnref:1&#34; class=&#34;footnote-backref&#34; role=&#34;doc-backlink&#34;&gt;&amp;#x21a9;&amp;#xfe0e;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
    </item>
    
    <item>
      <title>Python Hello World</title>
      <link>https://barloweanalytics.com/python/helloworld/</link>
      <pubDate>Mon, 15 Apr 2019 20:24:18 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/python/helloworld/</guid>
      <description>by Matthew Barlowe &#34;Hello World&#34; is a very common first program for just about any programming langauge. I&#39;m sure there&#39;s some history behind it, but I&#39;ve never bothered to look it up. Usually it&#39;s just a simple program of very limited lines that prints out the phrase &#34;Hello World.&#34; The purpose of this tutorial is to get you setup to write that first program.
Getting Started The first thing to do is open your favorite text editor.</description>
      <content>&lt;h2&gt; by Matthew Barlowe&lt;/h2&gt;
&lt;br /&gt;
&lt;p&gt;&#34;Hello World&#34; is a very common first program for just about any
programming langauge. I&#39;m sure there&#39;s some history behind it, but
I&#39;ve never bothered to look it up. Usually it&#39;s just a simple program
of very limited lines that prints out the phrase &#34;Hello World.&#34; The
purpose of this tutorial is to get you setup to write that first
program.&lt;/p&gt;
&lt;h2&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;The first thing to do is open your favorite text editor. I use NeoVim
which is based on Vim a text editor that comes with Unix. Vim is know for
being dificult if you aren&#39;t used to it, but there are many others out
there: Nano and Emacs come with the MacOS Unix as well, you could use
Atom which is built by Github, or even plain old TextEdit. The main
thing is to use something that won&#39;t add extra unseen characters to
what you type like a word processor such as Microsoft Word or Apple
Pages.&lt;/p&gt;
&lt;p&gt;Once you have your text editor open type these lines into them:
&lt;pre&gt;&lt;code&gt;#!/usr/bin/env python3

print(&amp;quot;Hello World&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once that is done save your file as &lt;code&gt;helloworld.py&lt;/code&gt; and exit the text editor if you are using
a terminal editor and type &lt;code&gt;python3 helloworld.py&lt;/code&gt; which will
produce this output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;python&#39;&gt;
Hello World
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Congratulations, you&amp;rsquo;ve just written your first python program! Obviously,
there&amp;rsquo;s a lot more to it than this but even in just this simple program
you can learn a lot.&lt;/p&gt;&lt;/p&gt;
&lt;h2&gt;Breaking Down the Code&lt;/h2&gt;
&lt;p&gt;Ok let&#39;s look at the code and see what&#39;s going on in this program. The first
line of the code is what&#39;s called a shebang line. This isn&#39;t unique to
python scripts but is common in the Linux/Unix environment. A shebang line
tells the shell what type of interpreter to use to process the text of the
file. You can read more about shebangs and their use in \*nix[^1] envronments
[^1]: \*nix is a term commonly used to refer to operating systems based on the Unix
operating. This includes Unix, Mac OS X, Linux among others. Most usually it refers to Linux
and Mac OS X as those are the two most popular \*nix environments.
&lt;a href=&#39;https://bash.cyberciti.biz/guide/Shebang&#39; target=&#34;_blank&#34;&gt;at this site&lt;/a&gt;. Basically,
this line is telling Unix what type of python to use to run the script.&lt;/p&gt;
&lt;p&gt;If you have followed my other tutorials you may be asking now, &#34;Why did
you list &lt;code&gt;/usr/bin/env&lt;/code&gt; instead of &lt;code&gt;/usr/bin/local&lt;/code&gt;
where our Homebrewed python3 is located? An excellent question. The reason
we use &lt;code&gt;/usr/bin/env&lt;/code&gt; instead of where our python is actually located
is because &lt;code&gt;env&lt;/code&gt; is an actual Unix command that will create
an environment using the environment variables and then run the program passed
to it in the arguments which in this case is python3.&lt;/p&gt;
&lt;p&gt;So the &lt;code&gt;env&lt;/code&gt; will then use the &lt;code&gt;$PATH&lt;/code&gt; variable, the
same one mentioned in the Homebrew tutorial, of the environment
and go down the directories on that &lt;code&gt;$PATH&lt;/code&gt;until it finds the
right directory of the program which it then executes. To sum it all up
it just makes your code more portable because it will search that computer
to find where &lt;code&gt;python&lt;/code&gt; is to exectue the script.&lt;/p&gt;
&lt;p&gt;And one last thing the shebang is good for is letting people know exactly
what type of code they are looking at. It will say python3 if working with
version 3.x, python2 if working with version 2.x, and just plain python
if the code will run with either version. You won&#39;t have to worry about
python 2.x for much longer as it will soon be deprecated but there is
plenty of legacy code out there still.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;python&#39;&gt;
print(&#34;Hello World&#34;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next part above is where the code actually starts doing something. In
this case that something is printing the phrase &#34;Hello World.&#34; Now there are
a lot more things you can do than this in python, but &lt;code&gt;print&lt;/code&gt; is one
of the most useful functions in python. &lt;code&gt;print&lt;/code&gt; is the way python
outputs things to the terminal screen. You can read more about the function
&lt;a href=&#39;https://docs.python.org/3/library/functions.html#print&#39; target=&#34;_blank&#34;&gt;here&lt;/a&gt;.
You have now officially written your first program. While it doesn&#39;t seem
very impressive right now but the cliche of &#34;a journey of a thousand miles
begins with just one step&#34; applies here. Plus think of all the hard work
done just to get your system setup to get to this point. So keep plugging
along, and if you&#39;d like to learn faster I suggest visiting
&lt;a href=&#39;https://automatetheboringstuff.com&#39; target=&#34;_blank&#34;&gt;Automate the Boring Stuff&lt;/a&gt; and reading
their really comprehensive tutorial to get you further along the path to
python mastery.&lt;/p&gt;
&lt;h2&gt;Sources&lt;/h2&gt;
&lt;a href=&#39;https://unix.stackexchange.com/questions/103467/what-is-env-command-doing&#39; target=&#34;_blank&#34;&gt;What is env&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&#39;https://stackoverflow.com/questions/6908143/should-i-put-shebang-in-python-scripts-and-what-form-should-it-take&#39; target=&#34;_blank&#34;&gt;
What form should shebang take&lt;/a&gt;
</content>
    </item>
    
    <item>
      <title>Installing Python</title>
      <link>https://barloweanalytics.com/python/pythoninstall/</link>
      <pubDate>Mon, 15 Apr 2019 19:25:14 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/python/pythoninstall/</guid>
      <description>by Matthew Barlowe Ok so if you&#39;ve read the Homebrew Tutorial you are ready to actually start using it to start programming in python. If you haven&amp;rsquo;t read that tutorial and you want to follow this one I sugestt going back and reading that one first. First though we need to get your system properly setup to run python safely and avoid problems in the future. The first step to doing that is to install Apple&amp;rsquo;s Xcode utilities, specifically GCC.</description>
      <content>&lt;h2&gt; by Matthew Barlowe&lt;/h2&gt;
&lt;br /&gt;
Ok so if you&#39;ve read the
&lt;p&gt;&lt;a href=&#34;https://barloweanalytics.com/unix/homebrew/&#34;&gt;Homebrew Tutorial&lt;/a&gt;
you are
ready to actually start using it to start programming in python. If you haven&amp;rsquo;t
read that tutorial and you want to follow this one I sugestt going
back and reading that one first. First though we need to get your system
properly setup to run python safely and avoid problems in
the future.  The first step to doing that is to install Apple&amp;rsquo;s Xcode utilities,
specifically GCC. If you already have Xcode installed you will not need to do this
as it will cause issues. In the terminal just type &lt;code&gt;xcode-select &amp;ndash;install&lt;/code&gt;
if you have Mavericks or higher MacOS. If you are using Mountain Lion or Lion
you&amp;rsquo;ll need to visit &lt;a href=&#39;https://developer.apple.com/downloads/&#39;&gt;Apple&amp;rsquo;s Developer Site&lt;/a&gt;.
You can read more about it by reading this Github &lt;a href=&#39;https://github.com/kennethreitz/osx-gcc-installer#readme&#39;&gt;
README&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Brewing Python&lt;/h2&gt;
&lt;p&gt;After that&#39;s done the next step is to type &lt;code&gt;brew install python3&lt;/code&gt;
into the terminal and hit enter and you&#39;ll start to see something like this begin to print out
on the screen:&lt;/p&gt;
&lt;div class=&#39;fitimage&#39;&gt;
&lt;p&gt;&lt;img src=&#34;https://barloweanalytics.com/python/brew.png&#34; alt=&#34;Homebrew installing&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Once Homebrew is finished running you should be good to go and are now able to start
running python.  Yes it was that easy, amazing isn&#39;t it! Let&#39;s check and make sure
you&#39;re up and running by typing &lt;code&gt;python3&lt;/code&gt; into the terminal and hit enter.
You should see the Python version come up (which should be 3.6.4) and then a prompt that
looks like this &lt;code&gt;&gt;&gt;&gt;&lt;/code&gt;. Once that pops up type &lt;code&gt;exit()&lt;/code&gt; and return
back to the terminal.&lt;/p&gt;
&lt;p&gt;Now that&#39;s python is setup lets get some python packages installed that will
be very important in making things go smooth in your programming future. We will
do this by using &lt;code&gt;pip&lt;/code&gt;. Pip is similar to Homebrew in that it is a package
manager except it only manages packages that relate to python. This will be the main
way you install extra programs for python that are not included in the base python packages.
Type this command
into your terminal &lt;code&gt;pip install virtualenv virtualenvwrapper&lt;/code&gt;.  These two
packages are important because they allow you to install virtual envrionments which I&#39;ll
get into later on in this tutorial.&lt;/p&gt;
&lt;p&gt;Once those are installed the next step is to type &lt;code&gt;nano ~/.bash_profile&lt;/code&gt; into
the terminal and hit enter. This will open the nano text editor and create the &lt;code&gt;
.bash_profile&lt;/code&gt; file if you don&#39;t have one created. &lt;code&gt;.bash_profile&lt;/code&gt; is
a file that tells your terminal (i.e. a bash shell) what to do everytime you open a new window.
You can set environment variables create keyboard shortcuts aka aliases and lots of
other things that are beyond the scope of this article.  But for now you need to add
these four lines to make sure virtualenvwrapper will work properly:
&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;
#Setup Virtualenvwrapper environment variables&lt;br /&gt;
export WORKON_HOME=$HOME/.virtualenvs&lt;br /&gt;
export PROJECT_HOME=$HOME/Devel&lt;br /&gt;
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python3.6&lt;br /&gt;
source /usr/local/bin/virtualenvwrapper.sh&lt;br /&gt;
&lt;/code&gt;
&lt;br /&gt;
The first line is just a comment to let others know what is going on. The next line creates
whats called in Unix/Linux an environment variable that is mapped to the &lt;code&gt;.virtualenvs&lt;/code&gt;
directory located in your home directory. This is where all your virtual environments are stored
that virtualenvwrapper keeps track of. The &lt;code&gt;export&lt;/code&gt; command tells your bash shell
to create this environment variable everytime you open a new bash window in the terminal.
The next line are where the virtualenvwrapper projects will be stored.  We won&#39;t be touching on
those in this tutorial.&lt;/p&gt;
&lt;p&gt;The fourth line tells virtualenvwrapper where to look for python
when it is creating a new virtualenv. Remember from the Homebrew tutorial that our brewed
python is in &lt;code&gt;/usr/local/bin&lt;/code&gt; so that&#39;s where we want our virtualenvwrapper to
look when creating a new python environment and not in &lt;code&gt;usr/bin&lt;/code&gt;. The last line
tells bash to run the virtualenvwrapper shell script everytime you open a terminal window
so that you can use virtualenvwrapper. Once you&#39;ve typed that exactly as it appears in
the nano window hit `Ctrl+o` and then enter to save. Once save hit `Ctrl+x` to exit.&lt;/p&gt;
&lt;p&gt;Now you should be back at the command line. Next just close the window you were in
and open a new one and should see these lines appear in the terminal:&lt;/p&gt;
&lt;div class=&#39;fitimage&#39;&gt;
&lt;p&gt;&lt;img src=&#34;https://barloweanalytics.com/python/virtualenvwrapper.png&#34; alt=&#34;virtualenvwrapper installing&#34;&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;That means the virutalenvwrapper bashscript is running and installing the directories neccesary
to get things up and running. To check and see type &lt;code&gt;workon&lt;/code&gt; which if everything is
working right should return nothing because we haven&#39;t created any virtual environments. Now
type &lt;code&gt;mkvirtualenv temp&lt;/code&gt; which will create a new virtual environment named temp.
Type &lt;code&gt;workon&lt;/code&gt; again and now it should show &lt;code&gt;temp&lt;/code&gt; in the list of virtual
environments on the computer. If you&#39;ve been able to complete all that good job! The hardest
part is over and now you are ready to being coding in earnest.&lt;/p&gt;
&lt;p&gt;So why virtualenvwrapper over virtualenv or other virtual environments? One reason is
that it stores your virtual environments in one location and allows you to acces those no
matter where you are in the file structure without typing long filepath names or creating aliases
in &lt;code&gt;.bash_profile&lt;/code&gt;. With &lt;code&gt;virtualenv&lt;/code&gt; you have to provide the file path
of the location of the virtual environment in order to activate it; by using &lt;code&gt;virtualenvwrapper&lt;/code&gt;
you avoide all the trouble of typing out those filepaths. Another benefit is that &lt;code&gt;virtualenvwrapper&lt;/code&gt;
keeps track of all the environments you have created so in case you forget the name of one you can just
type &lt;code&gt;workon&lt;/code&gt; and get a list of all the environments you have ever created.
&lt;h2&gt;Navigating Your Pythons&lt;/h2&gt;
&lt;p&gt;You should now have two Pythons installed on your Mac if you&#39;ve followed the instructions:
the Apple supplied python 2.7 and the python 3.6 which you brewed with Homebrew. These two pythons
are accesed in two different ways:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;python&lt;/code&gt;&lt;br /&gt;
This will access the Apple installed Python. &lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;python3&lt;/code&gt;&lt;br /&gt;
This will access the brewed installed python version 3.6.
There will also be two different &lt;code&gt;pip&lt;/code&gt; that will handle your python
packages:&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;pip&lt;/code&gt;&lt;br /&gt;
This pip will install packages to the MacOS python.&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;pip3&lt;/code&gt;&lt;br /&gt;
And this pip installs packages to our brewed python 3.6.&lt;br /&gt;
&lt;br /&gt;
~~Don&#39;t worry if you type pip instead of pip3 the way this is setup you&#39;ll get an error
message because it will try to install the package in &lt;code&gt;/usr/bin&lt;/code&gt; which
as I noted in the Homebrew tutorial is protected. This will happen &lt;b&gt;UNLESS&lt;/b&gt;
you run &lt;code&gt;pip&lt;/code&gt; using &lt;code&gt;sudo&lt;/code&gt;. Don&#39;t do that. You may read other
articles saying to do that. Don&#39;t. Unless you know what you&#39;re doing, and if you&#39;re
reading this you don&#39;t. Don&#39;t use sudo. If you run pip with out sudo and it works
it means you are logged in as a superuser by default which I suggest you change.~~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Edit: 2019-04-15&lt;/strong&gt;
I just recently installed python on a new Mac system. It seems that Homebrew now aliases
&lt;code&gt;pip&lt;/code&gt; to be the same as &lt;code&gt;pip3&lt;/code&gt;. However to make sure enter &lt;code&gt;which pip&lt;/code&gt; and the output should
be &lt;code&gt;/usr/local/bin/pip&lt;/code&gt; which means &lt;code&gt;pip&lt;/code&gt; is aliased to the correct pip. If the result is
&lt;code&gt;/usr/bin&lt;/code&gt; that means &lt;code&gt;pip&lt;/code&gt; is still tied to the system python and you should only use &lt;code&gt;pip3&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;Creating Virtual Environments&lt;/h2&gt;
&lt;p&gt;Ok so now you&#39;ve got your python setup and you have the ability to create virtual environments.
But why shoud you use virtual environments? That&#39;s a good question, and the benefit of
a virtual environment is it&#39;s ability to isolate a python install and the packages associated with
it from other pythons and other packages. Whenever you create a new virtual environment
you are creating a fresh python almost the same as if you brewed python for the very first time
on your system.  Unless specified the python in the virtual envrionment will only come with
the base packages that come with python itself.&lt;/p&gt;
&lt;p&gt;So any package you &lt;code&gt;pip install&lt;/code&gt; will only be found in &lt;b&gt;THAT&lt;/b&gt; virtual
environment. This is important because packages can conflict at any time and cause scripts
that would run normally to break, throw errors, or behave differently. And the package could
not even be broken it could just update and change the syntax of a function that you imported.
So what, just not update that one package? But what if you have another script that needs that
updated package? You can&#39;t have two version of the same package running side by side because that
will cause issues as well since python won&#39;t know which exact one you want. This is where
virtual environments come in.
&lt;p&gt;Virtual environments allow you to maintain two completely different versions of however many
packages you want without any problems at all. You just keep them in seperate environments and
switch between them as you need to run the neccesary python scripts. In the beginning this won&#39;t
be a big deal, but its a good habit to get into as it&#39;s much easier to track down a bug or
determine the source of an issue and then fix it inside of a virtual envrionment.&lt;/p&gt;
&lt;p&gt;So now that you know why to use virtual environments, the question is how? You&#39;ve already seen
a little bit when we were installing and testing &lt;code&gt;virtualenvwrapper&lt;/code&gt; but we&#39;ll go
over the main ones again:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;mkvirtualenv [environment_name]&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
This will create a virtual environment with whatever name you give it.  &lt;code&gt;mkvirtualenv test&lt;/code&gt;
will create a virtualenv named test.&lt;br/&gt;
&lt;br /&gt;
&lt;code&gt;workon&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
This command will switch between environments. &lt;code&gt;workon test&lt;/code&gt; will switch to the test
virtual environment. If you also just type &lt;code&gt;workon&lt;/code&gt; it will list all the virtual
environments you have created.&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;deactivate&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
This will exit you out of the current virtual environment you are working in.&lt;br /&gt;
&lt;br /&gt;
&lt;code&gt;rmvirtualenv [environment_name]&lt;/code&gt;&lt;br /&gt;
&lt;br /&gt;
This will remove the named environment. &lt;code&gt;rmvirtualenv test&lt;/code&gt; will remove the test virtual
environment.&lt;/p&gt;
&lt;p&gt;One last thing about virtual environments is that you don&#39;t need to worry about which
&lt;code&gt;pip&lt;/code&gt; you need to use while in one. &lt;code&gt;pip&lt;/code&gt; automatically maps to the &lt;code&gt;pip&lt;/code&gt;
installed with the virtual environment.&lt;/p&gt;
&lt;h2&gt;Installing Python 2.7&lt;/h2&gt;
&lt;p&gt;If you&#39;re new to python you probably don&#39;t need to worry about this, but just in case you do need to
I&#39;ll quickly go over installing python 2.7. If you&#39;ve followed all the steps covered so far in the tutorial
the next thing you need to type in the terminal is &lt;code&gt;brew install python2&lt;/code&gt;. This will bring up the
familiar brew screen from before.  Once thats installed, to access the brewed python you will need to use
&lt;code&gt;python2&lt;/code&gt; instead of &lt;code&gt;python3&lt;/code&gt;. The same for pip it will be &lt;code&gt;pip2&lt;/code&gt; instead
of &lt;code&gt;pip3&lt;/code&gt;. To create a python 2.7 virtual environment will also be a little different as well
as you will need to tell the virtualenv to use python 2 with the &lt;code&gt;-p&lt;/code&gt; flag: &lt;code&gt;mkvirtualenv -p python2 python2env&lt;/code&gt;
&lt;p&gt;If you have any questions feel free to email me at barloweanalytics@gmail.com make sure you give me OS specs and any error outputs/screenshots
so that I can diagnose your problem as quick as possible.
&lt;h2&gt;Sources:&lt;/h2&gt;
&lt;a href=&#39;https://docs.brew.sh/Homebrew-and-Python.html&#39;&gt;Homebrew Python Install Docs&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&#39;http://virtualenvwrapper.readthedocs.io/en/latest/install.html&#39;&gt;Virtualenvwrapper Docs&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&#39;http://www.linfo.org/path_env_var.html&#39;&gt;$PATH Definition&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&#39;https://stackoverflow.com/questions/8288297/whats-the-relationship-between-environments-and-projects-in-virtualenvwrapper&#39;&gt;
Difference Between Projects and Environments in Virtualenvwrapper&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&#39;https://stackoverflow.com/questions/23997403/installed-virtualenv-and-virtualenvwrapper-python-says-no-module-named-virtuale&#39;&gt;
Setting VIRTUALENVWRAPPER_PYTHON Variable&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&#39;http://docs.python-guide.org/en/latest/dev/virtualenvs/&#39;&gt;Python Virtualenvs&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&#39;http://docs.python-guide.org/en/latest/starting/install3/osx/&#39;&gt;Installing Python 3 on Mac OS X&lt;/a&gt;
&lt;br /&gt;
&lt;a href=&#39;https://stackoverflow.com/questions/6401951/using-different-versions-of-python-with-virtualenvwrapper&#39;&gt;
Another Way to set VIRTUALENVWRAPPER_PYTHON Variable&lt;/a&gt;
</content>
    </item>
    
    <item>
      <title>Homebrew Install</title>
      <link>https://barloweanalytics.com/unix/homebrew/</link>
      <pubDate>Mon, 15 Apr 2019 18:38:25 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/unix/homebrew/</guid>
      <description>by Matthew Barlowe Homebrew is a very usefual package manager that can be installed on the macOS system. It&#39;s what I use to manage by Python installations along with my SQL database as well. It has a nice, easy to learn, syntax and is simple to install from the terminal on an Apple computer. What is a package manager you ask? Well join me in the next section and we&#39;ll discuss the details behind it.</description>
      <content>&lt;h2&gt; by Matthew Barlowe&lt;/h2&gt;
      &lt;br /&gt;
      &lt;p&gt;Homebrew is a very usefual package manager that can be installed on the macOS system.
      It&#39;s what I use to manage by Python installations along with my SQL database as well.
      It has a nice, easy to learn, syntax and is simple to install from the terminal on an
      Apple computer. What is a package manager you ask? Well join me in the next section and
      we&#39;ll discuss the details behind it.&lt;/p&gt;
      &lt;h2&gt;What is a Package Manager?&lt;/h2&gt;
      &lt;p&gt;A package manger is according to &lt;a href=&#39;https://en.wikipedia.org/wiki/Package_manager&#39; target=&#34;_blank&#34;&gt;Wikipedia&lt;/a&gt;
      &#34;A a collection of software tools that automates the process of installing, upgrading,
      configuring, and removing computer programs for a computer&#39;s operating system in a
      consistent manner.&#34; In normal speak its just a program that handles programs on your&gt;Wikipedia&lt;/a&gt;
      &#34;A a collection of software tools that automates the process of installing, upgrading,
      configuring, and removing computer programs for a computer&#39;s operating system in a
      consistent manner.&#34; In normal speak its just a program that handles programs on your
      computer. Instead of having to go to Google to upgrade Chrome, or going to Adobe to
      upgrade Photoshop, this program takes care of all that leg work and brings the files to
      you while all you have to do is type a simple command.&lt;/p&gt;
      &lt;p&gt;The package manager will also keep track of what programs you have installed on your
      system and what versions of those programs are installed as well. It&#39;s a very useful for
      getting things up and running quickly and effortlessly without having to worry about dealing
      with source files. If I was powering on a new Macbook or iMac for the first time, Homebrew
      would be the first program I installed to get the software I need to develop my scripts.
      &lt;h2&gt;Installing Homebrew&lt;/h2&gt;
      &lt;p&gt;Installing Homebrew is simple and just takes this simple one line command:
      &lt;br /&gt;
      &lt;br /&gt;
        &lt;code&gt;
          /usr/bin/ruby -e &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&#34;
        &lt;/code&gt;
      &lt;br /&gt;
      &lt;br /&gt;
      Copy and paste that into your terminal and hit enter and that&#39;s all you need to do.
      And now you&#39;re on your way to becoming a programmer. You can read more about the Homebrew
      package manager at the &lt;a href=&#39;https://brew.sh&#39; target=&#34;_blank&#34;&gt;Homebrew website.&lt;/a&gt;
      &lt;h2&gt;How Does Homebrew Work?&lt;/h2&gt;
      &lt;p&gt;If you clicked on the page I linked above you would see that &#34;Homebrew installs packages
      to their own directory and then symlinks their files into &lt;code&gt;/usr/local&lt;/code&gt;. Ok, so what
      does all that mean? We&#39;ll break it down piece by piece. So first Homebrew installs the files
      you want in its own file system so they don&#39;t contaminate other files of the operating system.
      This is especially important for langauges like Ruby and Python where the Mac OS has system
      installed versions of these langauges already installed in &lt;code&gt;/usr/bin&lt;/code&gt;. You never want
      to touch the versions of these located in that folder as it can affect other programs the OS
      runs.&lt;/p&gt;
      &lt;p&gt;But the operating system won&#39;t know where these files are located because the directory is
      not stored in the OS &lt;code&gt;$PATH&lt;/code&gt; environment variable(If you don&#39;t understand what that is
      don&#39;t worry we&#39;ll get there in future tutorials). So to get around that Homebrew creates a symbolic
      link to its files and stores those in your &lt;code&gt;/usr/local/bin&lt;/code&gt; which is in the &lt;code&gt;$PATH&lt;/code&gt;
      variable.&lt;/p&gt;
      &lt;p&gt;A symbolic link is basically the same as a shortcut in Windows or Mac where you create an
      icon on your desktop to point to a file or a directory. However, a symbolic link does a little
      bit more as it &lt;a href=&#39;https://www.makeuseof.com/tag/what-is-a-symbolic-link-what-are-its-uses-makeuseof-explains/&#39; target=&#34;_blank&#34;&gt;
        &#34;will make it look like the linked file is actually there, rather than it just being a shortcut.&#34;&lt;/a&gt;
      So Homebrew is making it look like the programs are in the bin folder
      so when we type the commands into terminal they will execute properly.&lt;/p&gt;
      &lt;p&gt;One last thing I&#39;ll touch on quickly is why installing to &lt;code&gt;/usr/local/&lt;/code&gt;
      is important.  &lt;code&gt;/usr&lt;/code&gt; back in the olden days was used to store executables and
      libraries that were not system critical, and &lt;code&gt;/usr/local/&lt;/code&gt; was used to store software
      that wouldn&#39;t be overwritten with a system update i.e. it was installed locally. However that
      has changed in recent years with most linuxes symbolic linking &lt;code&gt;/bin&lt;/code&gt; to
      &lt;code&gt;/usr/bin&lt;/code&gt; and Apple has &lt;code&gt;/usr&lt;/code&gt; protected as well. By installing into
      &lt;code&gt;/usr/local/&lt;/code&gt;we avoid accidentally overwritting or messing up files in our
      &lt;code&gt;usr/bin&lt;/code&gt; that could cause serious issues in the operation of the Mac OS. Again
      it&#39;s not neccesary to know any of this to get Homebrew to work on your computer so if you don&#39;t
      I wouldn&#39;t worry about it too much.
      &lt;h2&gt;Homebrew Commands&lt;/h2&gt;
      &lt;p&gt;Homebrew has three basic commands:
      &lt;br /&gt;
      &lt;br /&gt;
      &lt;code&gt;brew install [package name]&lt;/code&gt;
      &lt;br /&gt;
      &lt;br /&gt;
      &lt;code&gt;brew uninstall [package name]&lt;/code&gt;
      &lt;br /&gt;
      &lt;br /&gt;
      &lt;code&gt;brew upgrade [package name]&lt;/code&gt;
      &lt;br /&gt;
      &lt;br /&gt;
      These three commands will install new packages, remove old packages you no longer want,
      and update packages that are out of date. That&#39;s it, pretty easy right? There&#39;s a lot more
      to Homebrew than this, but if you want to learn more I suggest checking out the documentation
      in the link to their site above or the links in the sources I list below.
      &lt;h2&gt;Other OS Package Managers:&lt;/h2&gt;
      &lt;p&gt;Homebrew is only available for the MacOS, but if you&#39;re on Windows or Linux don&#39;t despair.
      &lt;a href=&#39;http://linuxbrew.sh&#39;&gt;Linux Brew&lt;/a&gt; is a package manager for Linux that is a fork of
      the Homebrew repo so should work in a very similar fashion. There&#39;s also more traditional linux package
      managers such as `yum` and `apt`.
      For Windows there seems to be
      &lt;a href=&#39;https://chocolatey.org&#39;&gt;Chocolatey&lt;/a&gt; that has both a GUI and a command line
      implementation.  I hav used `linuxbrew` for a little bit but it didn&#39;t work quite as
      seemlessly as Homebrew does for OS X so I&#39;d recommend going with `yum` or `apt`.
      As far as Chocolatey I haven&#39;t used it at all so I can&#39;t speak to its usefulness.
      &lt;a href=&#39;mailto:mcbarlowe@gmail.com&#39;&gt;mcbarlowe@gmail.com&lt;/a&gt; and let me know.&lt;/p&gt;
      &lt;h2&gt;Sources:&lt;/h2&gt;
      &lt;p&gt;&lt;a href=&#39;http://www.pyladies.com/blog/Get-Your-Mac-Ready-for-Python-Programming/&#39;&gt;
        Getting Your Mac Ready For Python Programming&lt;/a&gt;
      &lt;br /&gt;
      &lt;a href=&#39;https://kb.iu.edu/d/abbe&#39; target=&#34;_blank&#34;&gt;Create a Symbolic Link in Unix&lt;/a&gt;
      &lt;br /&gt;
      &lt;a href=&#39;https://unix.stackexchange.com/questions/4186/what-is-usr-local-bin&#39; target=&#34;_blank&#34;&gt;What is /usr/local/bin&lt;/a&gt;
      &lt;br /&gt;
      &lt;a href=&#39;https://en.wikipedia.org/wiki/Unix_filesystem#Conventional_directory_layout&#39; target=&#34;_blank&#34;&gt;Unix Filesystem Layout&lt;/a&gt;
      &lt;br /&gt;
      &lt;a href=&#39;https://www.centos.org/docs/5/html/5.1/Deployment_Guide/s3-filesystem-usr-local.html&#39; target=&#34;_blank&#34;&gt;CentOS Docs&lt;/a&gt;
      &lt;br /&gt;
      &lt;a href=&#39;https://en.wikipedia.org/wiki/PATH_(variable)&#39; target=&#34;_blank&#34;&gt;$PATH variable&lt;/a&gt;
      &lt;br /&gt;
      &lt;a href=&#39;https://computers.tutsplus.com/tutorials/homebrew-demystified-os-xs-ultimate-package-manager--mac-44884&#39; target=&#34;_blank&#34;&gt;Homebrew Demystified&lt;/a&gt;
</content>
    </item>
    
    <item>
      <title>Introduction to Git and Github</title>
      <link>https://barloweanalytics.com/git/gitintro/</link>
      <pubDate>Sun, 14 Apr 2019 17:30:40 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/git/gitintro/</guid>
      <description>by Matthew Barlowe So if you&amp;rsquo;ve started out doing a little coding either for fun or like me to try and do data analysis of the NHL, then you&amp;rsquo;ve probably heard people talk a lot about Git and Github. And if you were like me, you&amp;rsquo;ve even tried to learn it, or use it, but just got so frustrated you gave up and figured it wasn&amp;rsquo;t worth the time.
Well this article will try to dispel some of those confusions because once Git clicks for you, you&amp;rsquo;ll never code without it.</description>
      <content>&lt;h3 id=&#34;by-matthew-barlowe&#34;&gt;by Matthew Barlowe&lt;/h3&gt;
&lt;p&gt;So if you&amp;rsquo;ve started out doing a little coding either for fun or like me
to try and do data analysis of the NHL, then you&amp;rsquo;ve probably heard people
talk a lot about Git and Github. And if you were like me, you&amp;rsquo;ve even tried
to learn it, or use it, but just got so frustrated you gave up and figured
it wasn&amp;rsquo;t worth the time.&lt;/p&gt;
&lt;p&gt;Well this article will try to dispel some of those confusions because
once Git clicks for you, you&amp;rsquo;ll never code without it. It&amp;rsquo;s such a powerful
tool to fit into your coding arsenal. But before we get into setting up
Git and using let&amp;rsquo;s talk about what Git is and what it does.&lt;/p&gt;
&lt;p&gt;This article will be done from a Mac OS X developer point of view. The only
main differences between Mac and a Windows will be how you install and setup
git to work on your system. The actual git commands should be the same no
matter what Operating System (OS) you are on.&lt;/p&gt;
&lt;h3 id=&#34;what-is-git&#34;&gt;What is Git?&lt;/h3&gt;
&lt;p&gt;First off let&amp;rsquo;s differentiate between Git and Github. Many people use
these terms interchangeably, but they are very different things. Git is
what is called a Version Control System or VCS. To put it simply it&amp;rsquo;s a
software that just tracks the changes you make to the programs you
write. That&amp;rsquo;s all it is at its essence. Like working with a Google doc
tracking changes, Git remembers the changes, and more importantly the history of those changes,
you make to your files.  This allows Git to restore those files to any
previous state in the history of the development of the code.&lt;/p&gt;
&lt;p&gt;Now Git itself is self contained to your computer, nobody can
see your changes except for you. Github on the other hand is a website
where you can store your code and the history of your changes saved by Git.
This is where you will send your work when you want to share it with the
world. So keep that in mind when reading the rest of this article. Git is
the program on your computer, and Github is the website where you will
send your code when you want to share it. This also adds the benefit of
an extra back up in case something happens to your system.&lt;/p&gt;
&lt;h3 id=&#34;why-use-git&#34;&gt;Why use Git?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Track Changes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git as noted above keeps track of the changes you&amp;rsquo;ve made to your
code throughout the history of developing if used properly. Everytime I
add a new feature to my code I save it in Git. And using Git logs I can
see all the changes I&amp;rsquo;ve made. So if I write something and it messes
everything up I can just go back one step in the Git chain and get things
back up and running.&lt;/p&gt;
&lt;p&gt;Obviously this may not be a big deal if you are just writing code that
only you will use yourself. But there&amp;rsquo;s been plenty of times I&amp;rsquo;ve made
changes one night and forgotten what I&amp;rsquo;ve done the next day when I go back
to work on it. And if you are working with multiple people on a project
then this log of changes is invaluable to see what others have done in
the code base. Git also keeps track of the date and time of changes
made as well so you can see who made changes and when those changes
were made.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Branching&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is perhaps the most important part about git is that you can
create branches of the code you are working on in order to fix bugs or
create new features. You may be asking now, &amp;ldquo;Why not just create a copy
of the file and work on two copies?&amp;rdquo; Well if you&amp;rsquo;re only working on one
file then you may not need Git, but often you&amp;rsquo;ll be working on multiple
files that often interact with each other.&lt;/p&gt;
&lt;p&gt;Trying to keep track manually
of the working copies and copies that are being worked on would quickly
become confusing and could lead to bugs and errors that you&amp;rsquo;d have
to waste futher time tracking down. Git handles all that behind the scenes
so you don&amp;rsquo;t have to. You can create a new branch and make as many changes
all without breaking any of the files you are using until you have properly
tested the new versions.&lt;/p&gt;
&lt;p&gt;To use a personal example I recently added the ability to query goalie
stats to my twitter bot. Instead of taking the bot down and working on
the file until the features were added, I created a new branch where I
worked on the new features until they were finished. Once done, I then
merged those changes back into my main script. And in doing this I only
worked on one file the whole time.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It works with Everything&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Git is language agnostic. It works with any programming language out
there whether it&amp;rsquo;s Python, R, C++, or something else, Git doesn&amp;rsquo;t care.
It tracks all changes for all files no matter what they are. In fact
Git works just as well with writing a novel or a story as it does with writing
code! It&amp;rsquo;s near
universiality makes it a common ground for developers to meet and
collaborate on projects.&lt;/p&gt;&lt;/p&gt;
&lt;h2&gt;Setting up Git&lt;/h2&gt;
&lt;p&gt;The first step to getting Git up and running is to go to &lt;a href=&#39;github.com&#39;&gt;Github&lt;/a&gt;
and setup an account. Once that&#39;s done open up a terminal screen and we&#39;ll
get started installing Git. If you don&#39;t have Hombrew installed on your
system please head [here](/unix/homebrew/) and read this tutorial
to get up to date as I&#39;ll be using Homebrew to install Git.&lt;/p&gt;
&lt;p&gt;If you have Homebrew installed and running, all you need to do is type
this at the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
$ brew install git
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Brew does its usual stuff and after its done type &lt;code&gt;which git&lt;/code&gt;
to make sure we are using the git that brew installed. The output should be
&lt;code&gt;usr/local/bin/git&lt;/code&gt; if it is not then we need to change your &lt;code&gt;$PATH&lt;/code&gt;
variable to put the Homebrew version first. To do that type these commands
one at a time and hit enter after each one:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
$ echo export PATH=&#39;/usr/local/bin:$PATH&#39; &gt;&gt; ~/.bash_profile
$ source ~/.bash_profile
$ echo $PATH
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Without getting into too much detail about the commands, what you are doing there is placing
the &lt;code&gt;usr/local/bin&lt;/code&gt; at the front of your &lt;code&gt;$PATH&lt;/code&gt; so that the bash
shell will look there first for the commands you are trying to run. Next we&#39;ll run some
commands to setup git to use the account you just setup on Github when you
want to push your work to a repository.
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
$ git config --global user.name &#34;Your Name Here&#34;
$ git config --global user.email &#34;your_email@youremail.com&#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&#34;Your Name Here&#34; and &#34;your_email@youremail.com&#34; should be the username you created
and the email you created it with on Github. After that&#39;s done we&#39;re going to setup Git
to save your user name and password to the OSX keychain that way you don&#39;t have to type it
in everytime you want to push something to one of your repositories on Github.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
$ git config --global credential.helper osxkeychain
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The first time you push something to a repository you&#39;ll have to enter your user name
and password but after that it will be saved to the OSX keychain and you won&#39;t need to enter
it anymore. Now that we have everything setup lets start creating our first initial
repository or repo for short. A repository is just a fancy name for where we will
store our code.
&lt;h2&gt;Creating Your First Repository&lt;/h2&gt;
&lt;p&gt;Ok lets create a new directory to store our first repo.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
$ mkdir gittutorial
$ cd gittutorial
$ git init
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So with those three commands we created a new directory called &lt;code&gt;gittutorial&lt;/code&gt;
we changed the directory to &lt;code&gt;gittutorial&lt;/code&gt; and then we created the repository
with the &lt;code&gt;git init&lt;/code&gt; command. If everything worked correctly you should see
this text as output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
Initialized empty Git repository in /Users/MattBarlowe/gittutorial/.git/
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Instead of &lt;code&gt;/Users/MattBarlowe&lt;/code&gt; it will be whatever username you are logged in on
your Mac. So now that we have the repository initialized (init is short for initialize)
lets look our next command:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
$ git status
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will return this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;On branch master

No commits yet

nothing to commit (create/copy files and use &amp;quot;git add&amp;quot; to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is the status of our repository and it tells us three important things.
The first it tells us we are on branch master. Master is the first branch
git creates when you initialize the repository. This is the main branch you
will be working on in any repository. You can rename it if you wanted to, but
I&#39;d advise against it as its common usage to call it master.
&lt;/p&gt;
&lt;p&gt;The next line tells us that there have been no changes made to the repository.
In Git speak a &#39;commit&#39; is where you have saved your changes to Git. No commits
means we haven&#39;t made any changes which is to be expected as it&#39;s a newly created
repository. The third line means there are no files that we can even commit/save
which again as it is a newly created directory shouldn&#39;t be surprising.&lt;/p&gt;
&lt;p&gt;So lets create a file using whichever text editor you prefer. I use Vim myself
but if you want to use Nano or Emacs that&#39;s fine as well. But we&#39;ll write a
simple python script show below and then save it as `gittutorial.py`.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for x in range(10):
    print(x)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;After you&#39;ve saved the file exit back out to the command line and run
&lt;code&gt;git status&lt;/code&gt; and you should see this on the command line.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;On branch master

No commits yet

Untracked files:
(use &amp;quot;git add file...&amp;quot; to include in what will be committed)

gittutorial.py

nothing added to commit but untracked files present (use &amp;quot;git add&amp;quot; to track)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see the branch is the same and we still haven&#39;t made any commits, but
now we have a new one of Untracked files. This means that Git has noticed we created
a new file, but Git is not currently tracking it either in this commit or past commits.
As you can read in the output our next command &lt;code&gt;git add&lt;/code&gt; will begin the process
of git tracking our changes. Now type:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
$ git add gittutorial.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Nothing will print out but if you type &lt;code&gt;git status&lt;/code&gt; again you will see
this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;On branch master

No commits yet

Changes to be committed:
(use &amp;quot;git rm --cached file...&amp;quot; to unstage)

new file:   gittutorial.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So is our file saved? No! At least not yet. All we&#39;ve done is add the file to the staging area
so that when we commit the changes to our repository the file will be saved with the commit.
If you&#39;re a little confused don&#39;t worry a lot of people are confused over this step. Basically
what you are doing is telling Git what files you want to save when you actually save the state of
your repository. When you create a commit Git doesn&#39;t know what it needs to keep track of unless
you tell it the files it needs to track. All &lt;code&gt;git add&lt;/code&gt; does is tell Git exactly which
files you want to save.&lt;/p&gt;
&lt;p&gt;So lets actually make our first commit. Type this into the command line:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
$ git commit -m &#34;First Commit&#34;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So you&#39;ve made your first commit! The &#39;-m&#39; flag to git commit allows you to add a message to the
commit so you can describe what you&#39;ve done. You should always put a message on your commit so you
or others know what exactly you changed with that commit of the code. The message can be anything but
its best to keep it short and always put it between quotation marks.&lt;/p&gt;
&lt;p&gt;You have now officially saved the status of your repository
with Git. Think of a commit as taking a snapshot of your code in time. Except unlike a photo, git
allows you to go back and forth along the timeline of your code, i.e. the branch, and stop at any
point in time of the development where you made a commmit. So now that we&#39;ve commited our changes
lets type &lt;code&gt;git status&lt;/code&gt; and see what it tells us.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
On branch master
nothing to commit, working tree clean
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Once we&#39;ve commited our changes there is nothing more to commit. That is until you make new changes
and then you&#39;ll need to repeat the process over again. Ok let&#39;s get some more practice with this.
Go back into your gittutorial.py file and change the number in the range function to 20 save and then
exit. Now type in &lt;code&gt;git status&lt;/code&gt; and you&#39;ll see this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;On branch master
Changes not staged for commit:

(use &amp;quot;git add file...&amp;quot; to update what will be committed)
(use &amp;quot;git checkout -- file...&amp;quot; to discard changes in working directory)

modified:   gittutorial.py
no changes added to commit (use &amp;quot;git add&amp;quot; and/or &amp;quot;git commit -a&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So now that we&#39;ve made changes to the file we need to &lt;code&gt;git add&lt;/code&gt; and then
&lt;code&gt;git commit -m &#34;Changed number in range from 10 to 20&#34;&lt;/code&gt;. And now you have commited
your changes for the second time to the repository. So let&#39;s introduce a new command
where you can look at the history of your changes.
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
$ git log --oneline
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Which will produce this:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
88e287f (HEAD -&gt; master) Changed number in range from 10 to 20
c9801bb First Commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is a log of all the changes you&#39;ve made so far in this repository. As we&#39;ve only made
two changes, there are only two entries. The &lt;code&gt;--oneline&lt;/code&gt; shrinks your log down
into oneline for each entry to make it easier to read. To get more info for each commit
you can just type &lt;code&gt;git log&lt;/code&gt;. Let&#39;s go over the output of the log as there
are several important things in the output.
&lt;p&gt;The string of numbers at the front of each entry is what&#39;s called the SHA. This is a unique
hash number that is assigned to each commit that keeps track of the commits. It&#39;s actually
much longer than those seven numbers but its shortened for the oneline output. You can search
log for certain commits if you know their SHA number as well. The next thing is the
&lt;code&gt;(HEAD -&gt; master)&lt;/code&gt;. This shows you where the location of the current branch you have
checked out. This tells us that we are currently working on the latest commit in the branch.&lt;/p&gt;
&lt;p&gt;Now let&#39;s check out one of the most powerful features of git which is creating new branches.
Branches, and moving back and forth between them, really lie at the heart of what makes Git
great. Branches allow developers to work independently on the same files and develop different
features simultaneously. Understanding how they work is important to understand Git.&lt;/p&gt;
&lt;h2&gt;Branching&lt;/h2&gt;
&lt;p&gt;So lets create a new branch which we&#39;ll call newbranch because I don&#39;t feel
very creative.
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
$ git checkout -b newbranch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;git checkout&lt;/code&gt; is the main way one switches between branches in Git, however when
we add the &#39;-b&#39; flag it tells the command to create a new branch with the name we give it
and then switch to that branch. If we wanted to switch back to master all we would need to type
is &lt;code&gt;git checkout master&lt;/code&gt;. Now lets got back into our python file and add the line
&lt;code&gt;print(&#39;This is a new feature&#39;)&lt;/code&gt; after the for loop block and save it. We&#39;ll add and
commit these changes as we did before. To make sure you&#39;re on the newbranch make sure to run a
&lt;code&gt;git status&lt;/code&gt; and check.
&lt;p&gt;Ok now type &lt;code&gt;git log --oneline&lt;/code&gt; again and look at the output.
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
cf87ca3 (HEAD -&gt; newbranch) Added print statement
88e287f (master) Changed number in range from 10 to 20
c9801bb First Commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now you can see both branches on the log, master and newbranch, and Head is pointing at the most
recent commit on our current branch where we added the print statement to the script. Here with one command we can see
that newbranch is one step, or one commit ahead of master. This means up until the last commit in
newbranch that the two branches where exactly the same. You can see that the master branch is still
at the last commit from the last time we commited a change on that branch.
&lt;p&gt;Ok now thats done we are going to merge our new feature back into the master branch. Obviously
with only adding one line of code this is a little overkill but imagine if were working on a project
with multiple files and 1000s of lines of code and then you&#39;ll start to see the potential of Git and
why everybody uses it. So type &lt;code&gt;git checkout master&lt;/code&gt; to switch back to the master branch.
If you are ever unsure of which branch you are on &lt;code&gt;git status&lt;/code&gt; and check, here shortly I&#39;ll
show you a trick to help with that.&lt;/p&gt;
&lt;p&gt;So we&#39;ll switch back to the master branch with &lt;code&gt;git checkout master&lt;/code&gt; and then follow that
with a &lt;code&gt;git merge newbranch&lt;/code&gt; which will produce this output:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
Fast-forward
gittutorial.py | 1 +
1 file changed, 1 insertion(+)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This means that our merge is succesful! From the output you can see we only changed one file, and
inserted one line. This doesn&#39;t happen all the time and we&#39;ll look at what does happen with the
dreaded merge conflict.&lt;/p&gt;
&lt;h2&gt;Merge Conflict&lt;/h2&gt;
&lt;p&gt;So we&#39;ve done our first merge and everything went smoothly. Now we are going to look at when things
don&#39;t go smoothly. Open up our python script while still on the master branch and right underneath our
new feature print statement type this &lt;code&gt;print(&#39;This is a feature of the master branch&#39;)&lt;/code&gt;. Now
we&#39;ll &lt;code&gt;git add gittutorial.py&lt;/code&gt; and then &lt;code&gt;git commit -m &#34;Added new master feature&#34;&lt;/code&gt;
to commit the changes to the master branch. Now let&#39;s switch back over to newbranch with &lt;code&gt;git checkout newbranch&lt;/code&gt;.
Once there open the same python file and now add on the fourth line &lt;code&gt;print(&#39;This is a feature of the newbranch&#39;)&lt;/code&gt;.
Now add this file and commit just like you did with the master branch except change the commit message
to &#34;Added newbranch feature.&#34;
&lt;p&gt;Now lets switch back to master with the checkout command and try to merge the two branches. This should
be the output you get:
&lt;pre&gt;&lt;code&gt;Auto-merging gittutorial.py
CONFLICT (content): Merge conflict in gittutorial.py
Automatic merge failed; fix conflicts and then commit the result.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;So as you can see the merge failed because we have two different lines of code on the same line in each file.
To fix this we&#39;ll open up the code in our text editor, Vim for me but whatever you prefer and you&#39;ll see this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;for x in range(20):
print(x)
print(&#39;This is a new feature&#39;)
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
print(&#39;This is a feature on the master branch&#39;)
=======
print(&#39;This is a newbranch feature&#39;)
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; newbranch
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Git has clearly marked where the conflict is in our file. It will do this through out the file wherever
a conflict occurs so if you&#39;re working with a large file just search for HEAD and you can quickly zip through
the file and change what you want. Here Git gives us three choices: we can keep the master version, the newbranch
version, or both. We&#39;ll keep both for this excercise since it won&#39;t cause any problems. It obviously won&#39;t be this
easy all the time but this method will be the way you handle these issues when using Git. Since I&#39;m going to keep both
for this excercise all I need to do is delete the HEAD, newbranch, and equal signs lines and I&#39;m good to go.&lt;/p&gt;
&lt;p&gt;A quick note here, HEAD refers to the HEAD of the branch you are merging in to. In this case it is the master branch
but it could any branch that you are merging files into. Ok so after I&#39;ve deleted the lines I will add, and commit the file with
the message &#34;Merged master and newbranch.&#34;&lt;/p&gt;
&lt;p&gt;Let&#39;s get a visual representation of what all just happened. Type &lt;code&gt;git log --oneline --graph&lt;/code&gt; and hit
enter which should produce this output:
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
*   fe2e9e1 (HEAD -&gt; master) Merged master and newbranch
|\
| * 688fd3a (newbranch) Added new newbranch feature
* | b6090d1 Added new master feature
|/
* cf87ca3 Added print statement
* 88e287f Changed number in range from 10 to 20
* c9801bb First Commit
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As you can see here the dots on the left are our master branch and then we see the newbranch branch out and
then come back in which represents our merge. Each asterisk represents a commit on that branch. And now you know
the basics of Git! There&#39;s tons more complex stuff in Git, but these are some of the main commands and along with
the next ones I&#39;m going to show you represent the majority of commands you&#39;ll use on a day to day basis.
&lt;h2&gt;Using Github&lt;/h2&gt;
&lt;p&gt;Ok so we&#39;ve done a lot of talking about Git. And remember everything we&#39;ve discussed so far takes place ONLY
ON YOUR COMPUTER. No one else can see that code and those changes unless you allow them access to your computer.
But that&#39;s never a bright idea so that&#39;s why we have Github. On Github you are basically just storing all the changes
you make on your computer on the internet so other people can use it or recommend improvements via pull requests. But how do you
get what we&#39;ve done so far to Github itself?&lt;/p&gt;
&lt;p&gt;To get our code to Github we are going to do what people call pushing the repository. It&#39;s called that because the
command to send stuff to Github is &lt;code&gt;push&lt;/code&gt; as opposed to &lt;code&gt;pull&lt;/code&gt; which brings code from Github to your computer.
So to get our code to Github, you&#39;ll need to log into Github and at the top you&#39;ll see a plus sign. Click on that
and a drop down menu will appear and then click create new repository which will bring you to this screen.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://barloweanalytics.com/git/repocreate.png&#34; alt=&#34;&amp;lsquo;Creating a Github Repo&amp;rsquo;&#34;&gt;&lt;/p&gt;
&lt;p&gt;Name the repository but don&#39;t change anything else, and click &#34;Create Repository.&#34; The next screen will
have a url that looks something like this &lt;code&gt;https://github.com/mcbarlowe/gittutorial.git&lt;/code&gt;. Copy that url
and then in the terminal type
&lt;code&gt;git remote add origin your_url&lt;/code&gt; and
replace my url with your own. After that type &lt;code&gt;git push -u origin master&lt;/code&gt; and you should get output
that looks something like this:
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
Counting objects: 18, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (10/10), done.
Writing objects: 100% (18/18), 1.48 KiB | 759.00 KiB/s, done.
Total 18 (delta 3), reused 0 (delta 0)
remote: Resolving deltas: 100% (3/3), done.
To https://github.com/mcbarlowe/gittutorial.git
* [new branch]      master -&gt; master
Branch &#39;master&#39; set up to track remote branch &#39;master&#39; from &#39;origin&#39;.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;And now go to the url on github and you&#39;ll see your very own brand new repository on the website. If you&#39;ve gotten this
far great job! I know its hard and confusing. It was for me as well, and it took me about four of five failed attempts at
trying to learn how to use Git before I finally understood it. But once it clicks you&#39;ll wonder how
you ever lived without it.&lt;/p&gt;
&lt;p&gt;And now every time you make a commit and you want to push it up to Github all you have to type is &lt;code&gt;git push&lt;/code&gt;
and within minutes your code is posted. How cool is that? And if you want to push another branch than master just checkout
that branch and type &lt;code&gt;git push -u origin branchname&lt;/code&gt; and then when you have that branch checked out just type
&lt;code&gt;git push&lt;/code&gt; and that branch will be pushed to your Github repository as well.&lt;/p&gt;
&lt;h2&gt;Git Advice&lt;/h2&gt;
&lt;p&gt;Here&#39;s a couple rules of thumb to follow to save yourself some Git headaches&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Always run &lt;code&gt;git status&lt;/code&gt; before and after every add, commit, or merge. This will prevent you from making
mistakes of commiting wrong files to github like API keys, or forgetting to add files to the commit. It&#39;s just a good
habit to get into.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Commit often. That&#39;s not to say you need to commit everytime you change one thing, but a good rule I follow is
I make a commit everytime I write a new function and it passes its tests. That way if something goes wrong a 1000 lines
in you don&#39;t have to re type the whole thing and can just role back that one feature and branch it off and try to fix
it while you keep the master branch in production.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Always add commit messages to every commit. That way when you look back over the Git log you can see what changes
you&#39;ve implemented along the way. Like properly commenting your code, properly commenting your Git commits will
save yourself, and others, wasted time trying to figure out which exact commit they need to look at for a feature
implementation.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One last thing. I mentioned above an easy way to help keep track of what branch you are on. To do this we&#39;ll need to edit
your &lt;code&gt;.bash_profile&lt;/code&gt; which is located in your home directory. In Linux and Unix systems the Home directory is
always symbolized with the &lt;code&gt;~&lt;/code&gt; symbol. So to edit it you would type &lt;code&gt;vim ~/.bash_profile&lt;/code&gt;, or whatever text editor
you prefer. Once you have it open add these lines:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
# Git branch in prompt.
parse_git_branch() {
git branch 2&gt; /dev/null | sed -e &#39;/^[^*]/d&#39; -e &#39;s/* \(.*\)/ (\1)/&#39;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Now save the file and at the command line type &lt;code&gt;source ~/.bash_profile&lt;/code&gt; and you should see the git branch
you are currently on in the terminal prompt line like this:
&lt;pre&gt;&lt;code class=&#39;Command Line&#39;&gt;
Username@computer-name website (master) $
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ok thats it for now with this tutorial. I know it must be a lot to take in; trust me it was a lot to write. If you have any
questions you can always check the sources for further info. And as always I&#39;m always available on Twitter
&lt;a href=&#39;http://www.twitter.com/matt_barlowe&#39; target=&#34;_blank&#34;&gt;@matt_barlowe&lt;/a&gt;
or you can email me &lt;a href=&#39;mailto:barloweanalytics@gmail.com&#39; target=&#34;_blank&#34;&gt;barloweanalytics@gmail.com&lt;/a&gt; if you have longer questions.
Good luck in your future in version control I bet you&#39;ll do great.
&lt;h2&gt;Sources&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#39;http://burnedpixel.com/blog/beginners-setup-guide-for-ruby-node-git-github-on-your-mac/&#39; target=&#34;_blank&#34;&gt;Beginners Setup Guide for Git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;http://sourabhbajaj.com/mac-setup/Git/&#39; target=&#34;_blank&#34;&gt;Mac Setup Guide: Git&lt;/a&gt; This link covers a lot of other topics for setting
up your Mac as a development environment. And will probably cover things I won&#39;t get to for a while. Check it out if you&#39;re
wanting to do more advanced stuff.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://opensource.com/resources/what-is-git&#39; target=&#34;_blank&#34;&gt;What is Git?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://www.sbf5.com/~cduan/technical/git/git-1.shtml&#39; target=&#34;_blank&#34;&gt;Understanding Git Repositories&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://www.git-tower.com/learn/git/ebook/en/command-line/basics/what-is-version-control#start&#39; target=&#34;_blank&#34;&gt;What is Version Control&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://softwareengineering.stackexchange.com/questions/315252/why-does-everyone-use-git-in-a-centralized-manner&#39; target=&#34;_blank&#34;&gt;Engineering Stack Discussion on Git strutcture&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://www.makeuseof.com/tag/git-version-control-youre-developer/&#39; target=&#34;_blank&#34;&gt;What is Git and Why You Should Use Version Control if You are a Developer&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://help.github.com/articles/caching-your-github-password-in-git/&#39; target=&#34;_blank&#34;&gt;Caching your Github Password in Git&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/&#39; target=&#34;_blank&#34;&gt;Adding an Existing Project to Github&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://stackoverflow.com/questions/292357/what-is-the-difference-between-git-pull-and-git-fetch&#39; target=&#34;_blank&#34;&gt;What is the Difference between Git Pull and Git Fetch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#39;https://git-scm.com&#39; target=&#34;_blank&#34;&gt;Git Docs Page&lt;/a&gt;&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>My Work</title>
      <link>https://barloweanalytics.com/work/</link>
      <pubDate>Sat, 13 Apr 2019 22:46:09 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/work/</guid>
      <description>Rpubs Here&amp;rsquo;s some of the Data Analysis I&amp;rsquo;ve done in R. I don&amp;rsquo;t use R as much as I used to but I still love doing simple data exploration/graphing in it.
Github A lot of my public work had to be taken down as it dealt with NHL analytics. I&amp;rsquo;ve branched out into other things such as NBA analysis and fintech in the public sphere these days.
LinkedIn Standard LinkedIn stuff including some of the presentations I&amp;rsquo;ve done in the past on hockey analytics</description>
      <content>&lt;h1 id=&#34;rpubshttpsrpubscommcbarlowe&#34;&gt;&lt;a href=&#34;https://rpubs.com/mcbarlowe&#34;&gt;Rpubs&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Here&amp;rsquo;s some of the Data Analysis I&amp;rsquo;ve done in R. I don&amp;rsquo;t use R as much as I used to but I still
love doing simple data exploration/graphing in it.&lt;/p&gt;
&lt;h1 id=&#34;githubhttpsgithubcommcbarlowe&#34;&gt;&lt;a href=&#34;https://github.com/mcbarlowe&#34;&gt;Github&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;A lot of my public work had to be taken down as it dealt with NHL analytics.
I&amp;rsquo;ve branched out into other things such as NBA analysis and fintech in
the public sphere these days.&lt;/p&gt;
&lt;h1 id=&#34;linkedinhttpswwwlinkedincominmcbarlowe&#34;&gt;&lt;a href=&#34;https://www.linkedin.com/in/mcbarlowe/&#34;&gt;LinkedIn&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Standard LinkedIn stuff including some of the presentations I&amp;rsquo;ve done in the past on hockey
analytics&lt;/p&gt;
&lt;h1 id=&#34;stackoverflowhttpsstackoverflowcomusers7885229matthew-barlowe&#34;&gt;&lt;a href=&#34;https://stackoverflow.com/users/7885229/matthew-barlowe&#34;&gt;stackoverflow&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;Trying to make a toxic community better&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Tutorials</title>
      <link>https://barloweanalytics.com/tutorials/</link>
      <pubDate>Sat, 13 Apr 2019 22:24:45 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/tutorials/</guid>
      <description>This will be a site hosting tutorials for various subjects in Data Science written from the perspective of working in a Mac OS X environment.
Python Tutorials:   Installation
 Installing Python    Basics
 Hello World Functions Loops    R Tutorials   Basics
 Hello World Functions Loops    Java Tutorials   Basics
 Hello World Loops    SQL This will mainly deal with PostgreSQL version 11.</description>
      <content>&lt;p&gt;This will be a site hosting tutorials for various subjects in Data Science written
from the perspective of working in a Mac OS X environment.&lt;/p&gt;
&lt;h1 id=&#34;python-tutorials&#34;&gt;Python Tutorials:&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Installation&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/python/pythoninstall/&#34;&gt;Installing Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Basics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/python/helloworld/&#34;&gt;Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/python/functions/&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/python/loops/&#34;&gt;Loops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;r-tutorials&#34;&gt;R Tutorials&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/r/helloworld/&#34;&gt;Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/r/functions/&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/r/loops/&#34;&gt;Loops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;java-tutorials&#34;&gt;Java Tutorials&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basics&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/java/helloworld/&#34;&gt;Hello World&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/java/loops/&#34;&gt;Loops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;sql&#34;&gt;SQL&lt;/h1&gt;
&lt;p&gt;This will mainly deal with PostgreSQL version 11.2 but a lot of the
basic commands translate to any SQL flavor&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Installation
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/sql/install/&#34;&gt;Installing PostgreSQL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Commands
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/sql/sqlbasics/&#34;&gt;SQL Basic Commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/sql/createuser/&#34;&gt;Creating a new Postgres User&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/sql/login/&#34;&gt;Postgres Remote Login&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;git&#34;&gt;Git&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/git/gitintro/&#34;&gt;Getting Started with Git&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;unix&#34;&gt;Unix&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://barloweanalytics.com/unix/homebrew/&#34;&gt;Homebrew Install&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;statistics&#34;&gt;Statistics&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://barloweanalytics.com/posts/math/stats/gamma_distribution/&#34;&gt;Gamma Distribution&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </item>
    
    <item>
      <title>About Me</title>
      <link>https://barloweanalytics.com/about/aboutme/</link>
      <pubDate>Sat, 13 Apr 2019 21:58:17 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/about/aboutme/</guid>
      <description>I am a Basketball Operations Analyst for the Houston Rockets of the NBA focused on full stack development. Formerly I was an application developer for the National Hockey League. My skills are focused around building data systems to support data science and quantitative analysis. I also love to build models and study the math behind them in my free time.
My prefered technologies:
 Python Postgres Linux/Unix Django AWS Flask/SqlAlchemy  Technologies I have Experience with:</description>
      <content>&lt;p&gt;I am a Basketball Operations Analyst for the Houston Rockets of the NBA focused on full stack development. Formerly I was an application developer for the National Hockey League. My skills are focused around building data systems to support data science and quantitative analysis. I also love to build models and study the math behind them in my free time.&lt;/p&gt;
&lt;p&gt;My prefered technologies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Postgres&lt;/li&gt;
&lt;li&gt;Linux/Unix&lt;/li&gt;
&lt;li&gt;Django&lt;/li&gt;
&lt;li&gt;AWS&lt;/li&gt;
&lt;li&gt;Flask/SqlAlchemy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Technologies I have Experience with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Javascript/React/Express/Objection&lt;/li&gt;
&lt;li&gt;TSQL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This site is built using &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; static site generator.
Site theme is &lt;code&gt;terminal&lt;/code&gt; by &lt;a href=&#34;https://twitter.com/panr&#34;&gt;panr&lt;/a&gt;.
Site is hosted on &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;AWS S3 Buckets&lt;/a&gt; using
&lt;a href=&#34;https://aws.amazon.com/cloudfront/&#34;&gt;AWS Cloudfront&lt;/a&gt; to serve SSL certificates
and &lt;a href=&#34;https://aws.amazon.com/lambda/&#34;&gt;AWS Lambda&lt;/a&gt; to clean the urls. Source code
for site can be found &lt;a href=&#34;https://github.com/mcbarlowe/website&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>We&#39;re Back!</title>
      <link>https://barloweanalytics.com/posts/my-first-post/</link>
      <pubDate>Sat, 13 Apr 2019 21:36:40 -0400</pubDate>
      
      <guid>https://barloweanalytics.com/posts/my-first-post/</guid>
      <description>The Rebuild Has Begun Due to a lot (well a few) people asking me about my tutorials I&amp;rsquo;ve decided to bring them back. And It gives me a chance to revamp the old website with a little slicker format. So stay tuned as I slowly work to get things back in the shape they were before. As always you can address any concerns, questions, or requests to matt@barloweanaltyics.com.</description>
      <content>&lt;h1 id=&#34;the-rebuild-has-begun&#34;&gt;The Rebuild Has Begun&lt;/h1&gt;
&lt;p&gt;Due to a lot (well a few) people asking me about my tutorials I&amp;rsquo;ve decided to bring them
back. And It gives me a chance to revamp the old website with a little slicker format. So
stay tuned as I slowly work to get things back in the shape they were before. As always you
can address any concerns, questions, or requests to
&lt;a href=&#34;mailto:matt@barloweanaltyics.com&#34;&gt;matt@barloweanaltyics.com&lt;/a&gt;.&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
